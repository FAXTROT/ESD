
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000222  00800100  0000156c  00001600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000156c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000420  00800322  00800322  00001822  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001822  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001880  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005be2  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011e0  00000000  00000000  00007776  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000286a  00000000  00000000  00008956  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a4  00000000  00000000  0000b1c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000866  00000000  00000000  0000b864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005106  00000000  00000000  0000c0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a8  00000000  00000000  000111d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	59 c5       	rjmp	.+2738   	; 0xadc <__vector_10>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e6       	ldi	r30, 0x6C	; 108
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 32       	cpi	r26, 0x22	; 34
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a2 e2       	ldi	r26, 0x22	; 34
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 34       	cpi	r26, 0x42	; 66
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	03 d0       	rcall	.+6      	; 0xca <main>
      c4:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <main>:
	#elif defined(ADC_POLLING_UART_POLLING)
	main_adc_polling_uart_polling();
	#elif defined(CDS)
	main_cds();
	#elif defined(GAME_OBSTACLE)
	main_game_obstacle();
      ca:	9f d1       	rcall	.+830    	; 0x40a <main_game_obstacle>
	#else
	// Code to execute when none of the above conditions are met
	#endif
	// The rest of your main function
	return 0;
}
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	08 95       	ret

000000d2 <check_collision>:

void game_obstacle_update(void) {
	unsigned int joystick_x = Read_Adc_Data(3) / 16;
	unsigned int joystick_y = 127 - Read_Adc_Data(4) / 8;

	if(abs(joystick_x - 31) > JOYSTICK_DEAD_ZONE) {
      d2:	6f 92       	push	r6
      d4:	7f 92       	push	r7
      d6:	8f 92       	push	r8
      d8:	9f 92       	push	r9
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	64 97       	sbiw	r28, 0x14	; 20
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	f8 94       	cli
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	0f be       	out	0x3f, r0	; 63
      fc:	cd bf       	out	0x3d, r28	; 61
      fe:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <x_position>
     102:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <x_position+0x1>
     106:	88 e2       	ldi	r24, 0x28	; 40
     108:	c8 2e       	mov	r12, r24
     10a:	83 e0       	ldi	r24, 0x03	; 3
     10c:	d8 2e       	mov	r13, r24
     10e:	9c e3       	ldi	r25, 0x3C	; 60
     110:	e9 2e       	mov	r14, r25
     112:	93 e0       	ldi	r25, 0x03	; 3
     114:	f9 2e       	mov	r15, r25
     116:	86 01       	movw	r16, r12
     118:	4f e1       	ldi	r20, 0x1F	; 31
     11a:	84 2e       	mov	r8, r20
     11c:	91 2c       	mov	r9, r1
     11e:	5f e3       	ldi	r21, 0x3F	; 63
     120:	a5 2e       	mov	r10, r21
     122:	b1 2c       	mov	r11, r1
     124:	6a ee       	ldi	r22, 0xEA	; 234
     126:	66 2e       	mov	r6, r22
     128:	62 e0       	ldi	r22, 0x02	; 2
     12a:	76 2e       	mov	r7, r22
     12c:	f8 01       	movw	r30, r16
     12e:	80 81       	ld	r24, Z
     130:	91 81       	ldd	r25, Z+1	; 0x01
     132:	a9 01       	movw	r20, r18
     134:	48 1b       	sub	r20, r24
     136:	59 0b       	sbc	r21, r25
     138:	ca 01       	movw	r24, r20
     13a:	8c 3f       	cpi	r24, 0xFC	; 252
     13c:	5f ef       	ldi	r21, 0xFF	; 255
     13e:	95 07       	cpc	r25, r21
     140:	0c f4       	brge	.+2      	; 0x144 <check_collision+0x72>
     142:	40 c0       	rjmp	.+128    	; 0x1c4 <check_collision+0xf2>
     144:	05 97       	sbiw	r24, 0x05	; 5
     146:	0c f0       	brlt	.+2      	; 0x14a <check_collision+0x78>
     148:	3d c0       	rjmp	.+122    	; 0x1c4 <check_collision+0xf2>
     14a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <y_position>
     14e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <y_position+0x1>
     152:	42 81       	ldd	r20, Z+2	; 0x02
     154:	53 81       	ldd	r21, Z+3	; 0x03
     156:	84 1b       	sub	r24, r20
     158:	95 0b       	sbc	r25, r21
     15a:	8c 3f       	cpi	r24, 0xFC	; 252
     15c:	ef ef       	ldi	r30, 0xFF	; 255
     15e:	9e 07       	cpc	r25, r30
     160:	8c f1       	brlt	.+98     	; 0x1c4 <check_collision+0xf2>
     162:	05 97       	sbiw	r24, 0x05	; 5
     164:	7c f5       	brge	.+94     	; 0x1c4 <check_collision+0xf2>
     166:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lives>
     16a:	81 50       	subi	r24, 0x01	; 1
     16c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <lives>
     170:	88 23       	and	r24, r24
     172:	09 f4       	brne	.+2      	; 0x176 <check_collision+0xa4>
     174:	bc c0       	rjmp	.+376    	; 0x2ee <check_collision+0x21c>
     176:	90 92 0c 01 	sts	0x010C, r9	; 0x80010c <x_position+0x1>
     17a:	80 92 0b 01 	sts	0x010B, r8	; 0x80010b <x_position>
     17e:	b0 92 0a 01 	sts	0x010A, r11	; 0x80010a <y_position+0x1>
     182:	a0 92 09 01 	sts	0x0109, r10	; 0x800109 <y_position>
     186:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <__data_end+0x1>
     18a:	8f 93       	push	r24
     18c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <__data_end>
     190:	8f 93       	push	r24
     192:	7f 92       	push	r7
     194:	6f 92       	push	r6
     196:	41 e0       	ldi	r20, 0x01	; 1
     198:	50 e0       	ldi	r21, 0x00	; 0
     19a:	4c 0f       	add	r20, r28
     19c:	5d 1f       	adc	r21, r29
     19e:	5f 93       	push	r21
     1a0:	4f 93       	push	r20
     1a2:	f7 d6       	rcall	.+3566   	; 0xf92 <sprintf>
     1a4:	ae 01       	movw	r20, r28
     1a6:	4f 5f       	subi	r20, 0xFF	; 255
     1a8:	5f 4f       	sbci	r21, 0xFF	; 255
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	49 d3       	rcall	.+1682   	; 0x842 <lcd_string>
     1b0:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <x_position>
     1b4:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <x_position+0x1>
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	0f 90       	pop	r0
     1be:	0f 90       	pop	r0
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0c 5f       	subi	r16, 0xFC	; 252
     1c6:	1f 4f       	sbci	r17, 0xFF	; 255
     1c8:	e0 16       	cp	r14, r16
     1ca:	f1 06       	cpc	r15, r17
     1cc:	09 f0       	breq	.+2      	; 0x1d0 <check_collision+0xfe>
     1ce:	ae cf       	rjmp	.-164    	; 0x12c <check_collision+0x5a>
     1d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <goal>
     1d4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <goal+0x1>
     1d8:	28 1b       	sub	r18, r24
     1da:	39 0b       	sbc	r19, r25
     1dc:	2a 3f       	cpi	r18, 0xFA	; 250
     1de:	5f ef       	ldi	r21, 0xFF	; 255
     1e0:	35 07       	cpc	r19, r21
     1e2:	9c f0       	brlt	.+38     	; 0x20a <check_collision+0x138>
     1e4:	27 30       	cpi	r18, 0x07	; 7
     1e6:	31 05       	cpc	r19, r1
     1e8:	84 f4       	brge	.+32     	; 0x20a <check_collision+0x138>
     1ea:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <y_position>
     1ee:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <y_position+0x1>
     1f2:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <goal+0x2>
     1f6:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <goal+0x3>
     1fa:	82 1b       	sub	r24, r18
     1fc:	93 0b       	sbc	r25, r19
     1fe:	8a 3f       	cpi	r24, 0xFA	; 250
     200:	ef ef       	ldi	r30, 0xFF	; 255
     202:	9e 07       	cpc	r25, r30
     204:	14 f0       	brlt	.+4      	; 0x20a <check_collision+0x138>
     206:	07 97       	sbiw	r24, 0x07	; 7
     208:	ac f0       	brlt	.+42     	; 0x234 <check_collision+0x162>
     20a:	64 96       	adiw	r28, 0x14	; 20
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	f8 94       	cli
     210:	de bf       	out	0x3e, r29	; 62
     212:	0f be       	out	0x3f, r0	; 63
     214:	cd bf       	out	0x3d, r28	; 61
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	ff 90       	pop	r15
     220:	ef 90       	pop	r14
     222:	df 90       	pop	r13
     224:	cf 90       	pop	r12
     226:	bf 90       	pop	r11
     228:	af 90       	pop	r10
     22a:	9f 90       	pop	r9
     22c:	8f 90       	pop	r8
     22e:	7f 90       	pop	r7
     230:	6f 90       	pop	r6
     232:	08 95       	ret
     234:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <__data_end>
     238:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <__data_end+0x1>
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <__data_end+0x1>
     242:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <__data_end>
     246:	bb d1       	rcall	.+886    	; 0x5be <S_S7>
     248:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <__data_end+0x1>
     24c:	8f 93       	push	r24
     24e:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <__data_end>
     252:	8f 93       	push	r24
     254:	8a ee       	ldi	r24, 0xEA	; 234
     256:	92 e0       	ldi	r25, 0x02	; 2
     258:	9f 93       	push	r25
     25a:	8f 93       	push	r24
     25c:	8e 01       	movw	r16, r28
     25e:	0f 5f       	subi	r16, 0xFF	; 255
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	1f 93       	push	r17
     264:	0f 93       	push	r16
     266:	95 d6       	rcall	.+3370   	; 0xf92 <sprintf>
     268:	a8 01       	movw	r20, r16
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	e9 d2       	rcall	.+1490   	; 0x842 <lcd_string>
     270:	82 d6       	rcall	.+3332   	; 0xf76 <rand>
     272:	8f 73       	andi	r24, 0x3F	; 63
     274:	90 78       	andi	r25, 0x80	; 128
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	97 fd       	sbrc	r25, 7
     284:	2f c0       	rjmp	.+94     	; 0x2e4 <check_collision+0x212>
     286:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <goal+0x1>
     28a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <goal>
     28e:	73 d6       	rcall	.+3302   	; 0xf76 <rand>
     290:	8f 77       	andi	r24, 0x7F	; 127
     292:	90 78       	andi	r25, 0x80	; 128
     294:	97 fd       	sbrc	r25, 7
     296:	51 c0       	rjmp	.+162    	; 0x33a <check_collision+0x268>
     298:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <goal+0x3>
     29c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <goal+0x2>
     2a0:	12 c0       	rjmp	.+36     	; 0x2c6 <check_collision+0x1f4>
     2a2:	f6 01       	movw	r30, r12
     2a4:	91 83       	std	Z+1, r25	; 0x01
     2a6:	80 83       	st	Z, r24
     2a8:	66 d6       	rcall	.+3276   	; 0xf76 <rand>
     2aa:	8f 77       	andi	r24, 0x7F	; 127
     2ac:	90 78       	andi	r25, 0x80	; 128
     2ae:	97 fd       	sbrc	r25, 7
     2b0:	14 c0       	rjmp	.+40     	; 0x2da <check_collision+0x208>
     2b2:	f6 01       	movw	r30, r12
     2b4:	93 83       	std	Z+3, r25	; 0x03
     2b6:	82 83       	std	Z+2, r24	; 0x02
     2b8:	f4 e0       	ldi	r31, 0x04	; 4
     2ba:	cf 0e       	add	r12, r31
     2bc:	d1 1c       	adc	r13, r1
     2be:	ec 14       	cp	r14, r12
     2c0:	fd 04       	cpc	r15, r13
     2c2:	09 f4       	brne	.+2      	; 0x2c6 <check_collision+0x1f4>
     2c4:	a2 cf       	rjmp	.-188    	; 0x20a <check_collision+0x138>
     2c6:	57 d6       	rcall	.+3246   	; 0xf76 <rand>
     2c8:	8f 73       	andi	r24, 0x3F	; 63
     2ca:	90 78       	andi	r25, 0x80	; 128
     2cc:	97 ff       	sbrs	r25, 7
     2ce:	e9 cf       	rjmp	.-46     	; 0x2a2 <check_collision+0x1d0>
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	80 6c       	ori	r24, 0xC0	; 192
     2d4:	9f 6f       	ori	r25, 0xFF	; 255
     2d6:	01 96       	adiw	r24, 0x01	; 1
     2d8:	e4 cf       	rjmp	.-56     	; 0x2a2 <check_collision+0x1d0>
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	80 68       	ori	r24, 0x80	; 128
     2de:	9f 6f       	ori	r25, 0xFF	; 255
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	e7 cf       	rjmp	.-50     	; 0x2b2 <check_collision+0x1e0>
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	80 6c       	ori	r24, 0xC0	; 192
     2e8:	9f 6f       	ori	r25, 0xFF	; 255
     2ea:	01 96       	adiw	r24, 0x01	; 1
     2ec:	cc cf       	rjmp	.-104    	; 0x286 <check_collision+0x1b4>
     2ee:	12 d2       	rcall	.+1060   	; 0x714 <lcd_clear>
     2f0:	44 ef       	ldi	r20, 0xF4	; 244
     2f2:	52 e0       	ldi	r21, 0x02	; 2
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	a4 d2       	rcall	.+1352   	; 0x842 <lcd_string>
     2fa:	4f ef       	ldi	r20, 0xFF	; 255
     2fc:	52 e0       	ldi	r21, 0x02	; 2
     2fe:	61 e0       	ldi	r22, 0x01	; 1
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	9f d2       	rcall	.+1342   	; 0x842 <lcd_string>
     304:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <__data_end+0x1>
     308:	8f 93       	push	r24
     30a:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <__data_end>
     30e:	8f 93       	push	r24
     310:	81 ef       	ldi	r24, 0xF1	; 241
     312:	92 e0       	ldi	r25, 0x02	; 2
     314:	9f 93       	push	r25
     316:	8f 93       	push	r24
     318:	8e 01       	movw	r16, r28
     31a:	0f 5f       	subi	r16, 0xFF	; 255
     31c:	1f 4f       	sbci	r17, 0xFF	; 255
     31e:	1f 93       	push	r17
     320:	0f 93       	push	r16
     322:	37 d6       	rcall	.+3182   	; 0xf92 <sprintf>
     324:	a8 01       	movw	r20, r16
     326:	61 e0       	ldi	r22, 0x01	; 1
     328:	8c e0       	ldi	r24, 0x0C	; 12
     32a:	8b d2       	rcall	.+1302   	; 0x842 <lcd_string>
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	ff cf       	rjmp	.-2      	; 0x338 <check_collision+0x266>
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	80 68       	ori	r24, 0x80	; 128
     33e:	9f 6f       	ori	r25, 0xFF	; 255
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	aa cf       	rjmp	.-172    	; 0x298 <check_collision+0x1c6>

00000344 <game_obstacle_init>:
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	64 97       	sbiw	r28, 0x14	; 20
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	db d1       	rcall	.+950    	; 0x714 <lcd_clear>
     35e:	cc d2       	rcall	.+1432   	; 0x8f8 <ScreenBuffer_clear>
     360:	4d e0       	ldi	r20, 0x0D	; 13
     362:	53 e0       	ldi	r21, 0x03	; 3
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	6c d2       	rcall	.+1240   	; 0x842 <lcd_string>
     36a:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <__data_end+0x1>
     36e:	8f 93       	push	r24
     370:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <__data_end>
     374:	8f 93       	push	r24
     376:	8a ee       	ldi	r24, 0xEA	; 234
     378:	92 e0       	ldi	r25, 0x02	; 2
     37a:	9f 93       	push	r25
     37c:	8f 93       	push	r24
     37e:	8e 01       	movw	r16, r28
     380:	0f 5f       	subi	r16, 0xFF	; 255
     382:	1f 4f       	sbci	r17, 0xFF	; 255
     384:	1f 93       	push	r17
     386:	0f 93       	push	r16
     388:	04 d6       	rcall	.+3080   	; 0xf92 <sprintf>
     38a:	a8 01       	movw	r20, r16
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	58 d2       	rcall	.+1200   	; 0x842 <lcd_string>
     392:	2f ef       	ldi	r18, 0xFF	; 255
     394:	83 ed       	ldi	r24, 0xD3	; 211
     396:	90 e3       	ldi	r25, 0x30	; 48
     398:	21 50       	subi	r18, 0x01	; 1
     39a:	80 40       	sbci	r24, 0x00	; 0
     39c:	90 40       	sbci	r25, 0x00	; 0
     39e:	e1 f7       	brne	.-8      	; 0x398 <game_obstacle_init+0x54>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <game_obstacle_init+0x5e>
     3a2:	00 00       	nop
     3a4:	08 e2       	ldi	r16, 0x28	; 40
     3a6:	13 e0       	ldi	r17, 0x03	; 3
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	e0 d5       	rcall	.+3008   	; 0xf76 <rand>
     3b6:	8f 73       	andi	r24, 0x3F	; 63
     3b8:	90 78       	andi	r25, 0x80	; 128
     3ba:	97 fd       	sbrc	r25, 7
     3bc:	21 c0       	rjmp	.+66     	; 0x400 <__LOCK_REGION_LENGTH__>
     3be:	f8 01       	movw	r30, r16
     3c0:	91 83       	std	Z+1, r25	; 0x01
     3c2:	80 83       	st	Z, r24
     3c4:	d8 d5       	rcall	.+2992   	; 0xf76 <rand>
     3c6:	8f 77       	andi	r24, 0x7F	; 127
     3c8:	90 78       	andi	r25, 0x80	; 128
     3ca:	97 fd       	sbrc	r25, 7
     3cc:	14 c0       	rjmp	.+40     	; 0x3f6 <game_obstacle_init+0xb2>
     3ce:	f8 01       	movw	r30, r16
     3d0:	93 83       	std	Z+3, r25	; 0x03
     3d2:	82 83       	std	Z+2, r24	; 0x02
     3d4:	0c 5f       	subi	r16, 0xFC	; 252
     3d6:	1f 4f       	sbci	r17, 0xFF	; 255
     3d8:	f3 e0       	ldi	r31, 0x03	; 3
     3da:	0c 33       	cpi	r16, 0x3C	; 60
     3dc:	1f 07       	cpc	r17, r31
     3de:	51 f7       	brne	.-44     	; 0x3b4 <game_obstacle_init+0x70>
     3e0:	64 96       	adiw	r28, 0x14	; 20
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	08 95       	ret
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	80 68       	ori	r24, 0x80	; 128
     3fa:	9f 6f       	ori	r25, 0xFF	; 255
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	e7 cf       	rjmp	.-50     	; 0x3ce <game_obstacle_init+0x8a>
     400:	01 97       	sbiw	r24, 0x01	; 1
     402:	80 6c       	ori	r24, 0xC0	; 192
     404:	9f 6f       	ori	r25, 0xFF	; 255
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	da cf       	rjmp	.-76     	; 0x3be <game_obstacle_init+0x7a>

0000040a <main_game_obstacle>:
	lcd_clear();
	ScreenBuffer_clear();
	draw_game_elements();
}

void main_game_obstacle(void) {
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	64 97       	sbiw	r28, 0x14	; 20
     414:	0f b6       	in	r0, 0x3f	; 63
     416:	f8 94       	cli
     418:	de bf       	out	0x3e, r29	; 62
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	cd bf       	out	0x3d, r28	; 61
	init_devices();
     41e:	38 d3       	rcall	.+1648   	; 0xa90 <init_devices>
	game_obstacle_init();
     420:	91 df       	rcall	.-222    	; 0x344 <game_obstacle_init>
     422:	ae 01       	movw	r20, r28
     424:	4f 5f       	subi	r20, 0xFF	; 255
     426:	5f 4f       	sbci	r21, 0xFF	; 255
     428:	6a 01       	movw	r12, r20
     42a:	30 e4       	ldi	r19, 0x40	; 64
	unsigned int joystick_y = 127 - Read_Adc_Data(4) / 8;

	if(abs(joystick_x - 31) > JOYSTICK_DEAD_ZONE) {
		x_position += (joystick_x > 31) ? 1 : -1;
	}
	if(abs(joystick_y - 63) > JOYSTICK_DEAD_ZONE) {
     42c:	a3 2e       	mov	r10, r19
     42e:	b1 2c       	mov	r11, r1
     430:	4f e7       	ldi	r20, 0x7F	; 127
		y_position += (joystick_y > 63) ? 1 : -1;
     432:	84 2e       	mov	r8, r20
     434:	91 2c       	mov	r9, r1
     436:	5a ee       	ldi	r21, 0xEA	; 234
Point obstacles[MAX_OBSTACLES];
Point goal = {GOAL_X, GOAL_Y};
	
void show_score(void) {
	char score_text[20];
	sprintf(score_text, "Score: %d", score); // Convert the score into a string
     438:	e5 2e       	mov	r14, r21
     43a:	52 e0       	ldi	r21, 0x02	; 2
     43c:	f5 2e       	mov	r15, r21
	place_obstacles(); // Initialize obstacles at random positions
}


void game_obstacle_update(void) {
	unsigned int joystick_x = Read_Adc_Data(3) / 16;
     43e:	83 e0       	ldi	r24, 0x03	; 3
     440:	ae d0       	rcall	.+348    	; 0x59e <Read_Adc_Data>
     442:	8c 01       	movw	r16, r24
     444:	12 95       	swap	r17
     446:	02 95       	swap	r16
     448:	0f 70       	andi	r16, 0x0F	; 15
     44a:	01 27       	eor	r16, r17
     44c:	1f 70       	andi	r17, 0x0F	; 15
     44e:	01 27       	eor	r16, r17
	unsigned int joystick_y = 127 - Read_Adc_Data(4) / 8;
     450:	84 e0       	ldi	r24, 0x04	; 4
     452:	a5 d0       	rcall	.+330    	; 0x59e <Read_Adc_Data>
     454:	96 95       	lsr	r25
     456:	87 95       	ror	r24
     458:	96 95       	lsr	r25
     45a:	87 95       	ror	r24
     45c:	96 95       	lsr	r25
     45e:	87 95       	ror	r24
     460:	98 01       	movw	r18, r16

	if(abs(joystick_x - 31) > JOYSTICK_DEAD_ZONE) {
     462:	2f 51       	subi	r18, 0x1F	; 31
     464:	31 09       	sbc	r19, r1
     466:	37 fd       	sbrc	r19, 7
     468:	8f c0       	rjmp	.+286    	; 0x588 <main_game_obstacle+0x17e>
     46a:	2b 30       	cpi	r18, 0x0B	; 11
     46c:	31 05       	cpc	r19, r1
     46e:	0c f0       	brlt	.+2      	; 0x472 <main_game_obstacle+0x68>
     470:	69 c0       	rjmp	.+210    	; 0x544 <main_game_obstacle+0x13a>
     472:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <x_position>
     476:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <x_position+0x1>
     47a:	a5 01       	movw	r20, r10
		x_position += (joystick_x > 31) ? 1 : -1;
	}
	if(abs(joystick_y - 63) > JOYSTICK_DEAD_ZONE) {
     47c:	48 1b       	sub	r20, r24
     47e:	59 0b       	sbc	r21, r25
     480:	57 fd       	sbrc	r21, 7
     482:	70 c0       	rjmp	.+224    	; 0x564 <main_game_obstacle+0x15a>
     484:	4b 30       	cpi	r20, 0x0B	; 11
     486:	51 05       	cpc	r21, r1
     488:	0c f4       	brge	.+2      	; 0x48c <main_game_obstacle+0x82>
     48a:	73 c0       	rjmp	.+230    	; 0x572 <main_game_obstacle+0x168>
     48c:	f4 01       	movw	r30, r8
		y_position += (joystick_y > 63) ? 1 : -1;
     48e:	e8 1b       	sub	r30, r24
     490:	f9 0b       	sbc	r31, r25
     492:	e0 34       	cpi	r30, 0x40	; 64
     494:	f1 05       	cpc	r31, r1
     496:	08 f4       	brcc	.+2      	; 0x49a <main_game_obstacle+0x90>
     498:	71 c0       	rjmp	.+226    	; 0x57c <main_game_obstacle+0x172>
     49a:	41 e0       	ldi	r20, 0x01	; 1
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <y_position>
     4a2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <y_position+0x1>
     4a6:	84 0f       	add	r24, r20
     4a8:	95 1f       	adc	r25, r21
     4aa:	20 34       	cpi	r18, 0x40	; 64
	}

	x_position = (x_position > 63) ? 63 : (x_position < 0) ? 0 : x_position;
     4ac:	31 05       	cpc	r19, r1
     4ae:	10 f0       	brcs	.+4      	; 0x4b4 <main_game_obstacle+0xaa>
     4b0:	2f e3       	ldi	r18, 0x3F	; 63
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <x_position+0x1>
     4b8:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <x_position>
     4bc:	80 38       	cpi	r24, 0x80	; 128
	y_position = (y_position >127) ? 127 : (y_position < 0) ? 0 : y_position;
     4be:	91 05       	cpc	r25, r1
     4c0:	10 f0       	brcs	.+4      	; 0x4c6 <main_game_obstacle+0xbc>
     4c2:	8f e7       	ldi	r24, 0x7F	; 127
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <y_position+0x1>
     4ca:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <y_position>

	check_collision();
     4ce:	01 de       	rcall	.-1022   	; 0xd2 <check_collision>
	
	lcd_clear();
     4d0:	21 d1       	rcall	.+578    	; 0x714 <lcd_clear>
     4d2:	12 d2       	rcall	.+1060   	; 0x8f8 <ScreenBuffer_clear>
	ScreenBuffer_clear();
     4d4:	43 e0       	ldi	r20, 0x03	; 3
}


void draw_game_elements(void) {
	// Draw the player
	GLCD_Circle(x_position, y_position, PLAYER_RADIUS);
     4d6:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <y_position>
     4da:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <x_position>
     4de:	1b d2       	rcall	.+1078   	; 0x916 <GLCD_Circle>
     4e0:	44 e0       	ldi	r20, 0x04	; 4
	

	// Draw the goal
	GLCD_Circle(goal.x, goal.y, GOAL_RADIUS);
     4e2:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <goal+0x2>
     4e6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <goal>
     4ea:	15 d2       	rcall	.+1066   	; 0x916 <GLCD_Circle>
     4ec:	08 e2       	ldi	r16, 0x28	; 40
     4ee:	13 e0       	ldi	r17, 0x03	; 3
     4f0:	42 e0       	ldi	r20, 0x02	; 2

	// Draw the obstacles
	for (int i = 0; i < MAX_OBSTACLES; i++) {
		GLCD_Circle(obstacles[i].x, obstacles[i].y, OBSTACLE_RADIUS);
     4f2:	f8 01       	movw	r30, r16
     4f4:	62 81       	ldd	r22, Z+2	; 0x02
     4f6:	80 81       	ld	r24, Z
     4f8:	0e d2       	rcall	.+1052   	; 0x916 <GLCD_Circle>
     4fa:	0c 5f       	subi	r16, 0xFC	; 252
     4fc:	1f 4f       	sbci	r17, 0xFF	; 255
     4fe:	f3 e0       	ldi	r31, 0x03	; 3
     500:	0c 33       	cpi	r16, 0x3C	; 60

	// Draw the goal
	GLCD_Circle(goal.x, goal.y, GOAL_RADIUS);

	// Draw the obstacles
	for (int i = 0; i < MAX_OBSTACLES; i++) {
     502:	1f 07       	cpc	r17, r31
     504:	a9 f7       	brne	.-22     	; 0x4f0 <main_game_obstacle+0xe6>
     506:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <__data_end+0x1>
Point obstacles[MAX_OBSTACLES];
Point goal = {GOAL_X, GOAL_Y};
	
void show_score(void) {
	char score_text[20];
	sprintf(score_text, "Score: %d", score); // Convert the score into a string
     50a:	8f 93       	push	r24
     50c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <__data_end>
     510:	8f 93       	push	r24
     512:	ff 92       	push	r15
     514:	ef 92       	push	r14
     516:	df 92       	push	r13
     518:	cf 92       	push	r12
     51a:	3b d5       	rcall	.+2678   	; 0xf92 <sprintf>
     51c:	a6 01       	movw	r20, r12
	lcd_string(1, 0, score_text); // Display the score on the second line of the LCD
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	8f d1       	rcall	.+798    	; 0x842 <lcd_string>
     524:	2f ef       	ldi	r18, 0xFF	; 255
     526:	40 e7       	ldi	r20, 0x70	; 112
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     528:	52 e0       	ldi	r21, 0x02	; 2
     52a:	21 50       	subi	r18, 0x01	; 1
     52c:	40 40       	sbci	r20, 0x00	; 0
     52e:	50 40       	sbci	r21, 0x00	; 0
     530:	e1 f7       	brne	.-8      	; 0x52a <main_game_obstacle+0x120>
     532:	00 c0       	rjmp	.+0      	; 0x534 <main_game_obstacle+0x12a>
     534:	00 00       	nop
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	7d cf       	rjmp	.-262    	; 0x43e <main_game_obstacle+0x34>
     544:	00 32       	cpi	r16, 0x20	; 32
     546:	11 05       	cpc	r17, r1
void game_obstacle_update(void) {
	unsigned int joystick_x = Read_Adc_Data(3) / 16;
	unsigned int joystick_y = 127 - Read_Adc_Data(4) / 8;

	if(abs(joystick_x - 31) > JOYSTICK_DEAD_ZONE) {
		x_position += (joystick_x > 31) ? 1 : -1;
     548:	e0 f0       	brcs	.+56     	; 0x582 <main_game_obstacle+0x178>
     54a:	41 e0       	ldi	r20, 0x01	; 1
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <x_position>
     552:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <x_position+0x1>
     556:	24 0f       	add	r18, r20
     558:	35 1f       	adc	r19, r21
     55a:	a5 01       	movw	r20, r10
     55c:	48 1b       	sub	r20, r24
	}
	if(abs(joystick_y - 63) > JOYSTICK_DEAD_ZONE) {
     55e:	59 0b       	sbc	r21, r25
     560:	57 ff       	sbrs	r21, 7
     562:	90 cf       	rjmp	.-224    	; 0x484 <main_game_obstacle+0x7a>
     564:	51 95       	neg	r21
     566:	41 95       	neg	r20
     568:	51 09       	sbc	r21, r1
     56a:	4b 30       	cpi	r20, 0x0B	; 11
     56c:	51 05       	cpc	r21, r1
     56e:	0c f0       	brlt	.+2      	; 0x572 <main_game_obstacle+0x168>
     570:	8d cf       	rjmp	.-230    	; 0x48c <main_game_obstacle+0x82>
     572:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <y_position>
     576:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <y_position+0x1>
     57a:	97 cf       	rjmp	.-210    	; 0x4aa <main_game_obstacle+0xa0>
     57c:	4f ef       	ldi	r20, 0xFF	; 255
     57e:	5f ef       	ldi	r21, 0xFF	; 255
		y_position += (joystick_y > 63) ? 1 : -1;
     580:	8e cf       	rjmp	.-228    	; 0x49e <main_game_obstacle+0x94>
     582:	4f ef       	ldi	r20, 0xFF	; 255
     584:	5f ef       	ldi	r21, 0xFF	; 255
void game_obstacle_update(void) {
	unsigned int joystick_x = Read_Adc_Data(3) / 16;
	unsigned int joystick_y = 127 - Read_Adc_Data(4) / 8;

	if(abs(joystick_x - 31) > JOYSTICK_DEAD_ZONE) {
		x_position += (joystick_x > 31) ? 1 : -1;
     586:	e3 cf       	rjmp	.-58     	; 0x54e <main_game_obstacle+0x144>
     588:	31 95       	neg	r19
     58a:	21 95       	neg	r18

void game_obstacle_update(void) {
	unsigned int joystick_x = Read_Adc_Data(3) / 16;
	unsigned int joystick_y = 127 - Read_Adc_Data(4) / 8;

	if(abs(joystick_x - 31) > JOYSTICK_DEAD_ZONE) {
     58c:	31 09       	sbc	r19, r1
     58e:	6d cf       	rjmp	.-294    	; 0x46a <main_game_obstacle+0x60>

00000590 <Adc_init>:
#define ADC_2_56_TYPE 0xC0      // A/D 컨버터 사용 기준 전압  2.56 설정

//ADC initialize
void Adc_init(void)
{
	ADCSRA = 0x00;	// disable adc  (ADEN ADSC ADATE ADIF ADIE ADPS2 ADPS1 ADPS0)
     590:	16 b8       	out	0x06, r1	; 6
	ADMUX  = 0x00; 	// select adc input 0 and Aref (REFS1 REFS0 ADLAR __ MUX3 MUX2 MUX1 MUX0)
     592:	17 b8       	out	0x07, r1	; 7
	
	ACSR   = 0x80;	// (ACD ACBG ACO ACI ACIE ACIC ACIS1 ACIS0)
     594:	80 e8       	ldi	r24, 0x80	; 128
     596:	88 b9       	out	0x08, r24	; 8
	ADCSRA = 0xC3;	// Conversion time:  Fosc/8
     598:	83 ec       	ldi	r24, 0xC3	; 195
     59a:	86 b9       	out	0x06, r24	; 6
     59c:	08 95       	ret

0000059e <Read_Adc_Data>:

unsigned int Read_Adc_Data(unsigned char adc_input)   // ADC  읽어 들이기
{
	unsigned int adc = 0;
	
	ADCSRA = 0xC3;    // Conversion time: Fosc/8
     59e:	93 ec       	ldi	r25, 0xC3	; 195
     5a0:	96 b9       	out	0x06, r25	; 6
	//CLI();
	
	ADMUX = adc_input | ADC_AVCC_TYPE ;      // adc  사용 핀 설정
     5a2:	80 64       	ori	r24, 0x40	; 64
     5a4:	87 b9       	out	0x07, r24	; 7
	//ADMUX.3 = 1;
	
	ADCSRA |= 0x40;                            // Wait for the AD conversion to complete
     5a6:	36 9a       	sbi	0x06, 6	; 6
	
	while((ADCSRA & 0x10) != 0x10);
     5a8:	34 9b       	sbis	0x06, 4	; 6
     5aa:	fe cf       	rjmp	.-4      	; 0x5a8 <Read_Adc_Data+0xa>
	adc += ADCL + ( ADCH * 256 );
     5ac:	24 b1       	in	r18, 0x04	; 4
     5ae:	85 b1       	in	r24, 0x05	; 5
	
	
	//SEI();
	ADCSRA = 0x00;
     5b0:	16 b8       	out	0x06, r1	; 6
	return adc;
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	98 2f       	mov	r25, r24
     5b6:	88 27       	eor	r24, r24
}
     5b8:	82 0f       	add	r24, r18
     5ba:	91 1d       	adc	r25, r1
     5bc:	08 95       	ret

000005be <S_S7>:
void S_S2()    {    Sound(BB,HDo);    Sound(BB,HMi);                                        }
void S_S3()    {    Sound(BB,LDo);                                                          }
void S_S4()    {    Sound(BB,BDo);    Sound(BB,BMi);    Sound(BB,BSo);                      }
void S_S5()    {    Sound(BB,BDo);    Sound(BB,BMi);                          }
void S_S6()    {    unsigned char i;    for(i=0; i<4; i++)    {    Sound(BB,HSo);    Sound(BB,HDo);    }    }
void S_S7()    {    Sound(BB,BDo);    Sound(BB,HDo);                                                 }
     5be:	2f ea       	ldi	r18, 0xAF	; 175
     5c0:	30 e0       	ldi	r19, 0x00	; 0

void Sound(unsigned int ch, unsigned int time)
{	unsigned int tim;
	tim = ch;
	tim = tim*1000 / time;
	while(tim--){		MelOn;		delay_us_Melody(time);
     5c2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     5c6:	80 61       	ori	r24, 0x10	; 16
     5c8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     5cc:	88 ec       	ldi	r24, 0xC8	; 200
     5ce:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d0:	45 e0       	ldi	r20, 0x05	; 5
     5d2:	4a 95       	dec	r20
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <S_S7+0x14>
     5d6:	00 00       	nop
     5d8:	01 97       	sbiw	r24, 0x01	; 1
#define     Buzzer_Pin      4
#define     MelOn    SETBIT(Buzzer_Port, Buzzer_Pin)
#define     MelOff   CLEARBIT(Buzzer_Port, Buzzer_Pin)

void delay_us_Melody(int data)
{	int i;	for(i=0;i<data;i++)	{		_delay_us(1);	}}
     5da:	d1 f7       	brne	.-12     	; 0x5d0 <S_S7+0x12>
void Sound(unsigned int ch, unsigned int time)
{	unsigned int tim;
	tim = ch;
	tim = tim*1000 / time;
	while(tim--){		MelOn;		delay_us_Melody(time);
						MelOff;		delay_us_Melody(time);
     5dc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     5e0:	8f 7e       	andi	r24, 0xEF	; 239
     5e2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     5e6:	88 ec       	ldi	r24, 0xC8	; 200
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	45 e0       	ldi	r20, 0x05	; 5
     5ec:	4a 95       	dec	r20
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <S_S7+0x2e>
     5f0:	00 00       	nop
     5f2:	01 97       	sbiw	r24, 0x01	; 1
#define     Buzzer_Pin      4
#define     MelOn    SETBIT(Buzzer_Port, Buzzer_Pin)
#define     MelOff   CLEARBIT(Buzzer_Port, Buzzer_Pin)

void delay_us_Melody(int data)
{	int i;	for(i=0;i<data;i++)	{		_delay_us(1);	}}
     5f4:	d1 f7       	brne	.-12     	; 0x5ea <S_S7+0x2c>
     5f6:	21 50       	subi	r18, 0x01	; 1
     5f8:	31 09       	sbc	r19, r1

void Sound(unsigned int ch, unsigned int time)
{	unsigned int tim;
	tim = ch;
	tim = tim*1000 / time;
	while(tim--){		MelOn;		delay_us_Melody(time);
     5fa:	19 f7       	brne	.-58     	; 0x5c2 <S_S7+0x4>
     5fc:	2a e5       	ldi	r18, 0x5A	; 90
     5fe:	31 e0       	ldi	r19, 0x01	; 1
     600:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     604:	80 61       	ori	r24, 0x10	; 16
     606:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     60a:	85 e6       	ldi	r24, 0x65	; 101
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	45 e0       	ldi	r20, 0x05	; 5
     610:	4a 95       	dec	r20
     612:	f1 f7       	brne	.-4      	; 0x610 <S_S7+0x52>
     614:	00 00       	nop
     616:	01 97       	sbiw	r24, 0x01	; 1
#define     Buzzer_Pin      4
#define     MelOn    SETBIT(Buzzer_Port, Buzzer_Pin)
#define     MelOff   CLEARBIT(Buzzer_Port, Buzzer_Pin)

void delay_us_Melody(int data)
{	int i;	for(i=0;i<data;i++)	{		_delay_us(1);	}}
     618:	d1 f7       	brne	.-12     	; 0x60e <S_S7+0x50>
void Sound(unsigned int ch, unsigned int time)
{	unsigned int tim;
	tim = ch;
	tim = tim*1000 / time;
	while(tim--){		MelOn;		delay_us_Melody(time);
						MelOff;		delay_us_Melody(time);
     61a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     61e:	8f 7e       	andi	r24, 0xEF	; 239
     620:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     624:	85 e6       	ldi	r24, 0x65	; 101
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	45 e0       	ldi	r20, 0x05	; 5
     62a:	4a 95       	dec	r20
     62c:	f1 f7       	brne	.-4      	; 0x62a <S_S7+0x6c>
     62e:	00 00       	nop
     630:	01 97       	sbiw	r24, 0x01	; 1
#define     Buzzer_Pin      4
#define     MelOn    SETBIT(Buzzer_Port, Buzzer_Pin)
#define     MelOff   CLEARBIT(Buzzer_Port, Buzzer_Pin)

void delay_us_Melody(int data)
{	int i;	for(i=0;i<data;i++)	{		_delay_us(1);	}}
     632:	d1 f7       	brne	.-12     	; 0x628 <S_S7+0x6a>
     634:	21 50       	subi	r18, 0x01	; 1
     636:	31 09       	sbc	r19, r1

void Sound(unsigned int ch, unsigned int time)
{	unsigned int tim;
	tim = ch;
	tim = tim*1000 / time;
	while(tim--){		MelOn;		delay_us_Melody(time);
     638:	19 f7       	brne	.-58     	; 0x600 <S_S7+0x42>
void S_S2()    {    Sound(BB,HDo);    Sound(BB,HMi);                                        }
void S_S3()    {    Sound(BB,LDo);                                                          }
void S_S4()    {    Sound(BB,BDo);    Sound(BB,BMi);    Sound(BB,BSo);                      }
void S_S5()    {    Sound(BB,BDo);    Sound(BB,BMi);                          }
void S_S6()    {    unsigned char i;    for(i=0; i<4; i++)    {    Sound(BB,HSo);    Sound(BB,HDo);    }    }
void S_S7()    {    Sound(BB,BDo);    Sound(BB,HDo);                                                 }
     63a:	08 95       	ret

0000063c <GLCD_Dot.part.0>:
	void GLCD_Rectangle(unsigned char x1,unsigned char y1,unsigned char x2,unsigned char y2)
	{
		GLCD_Line(x1,y1,x1,y2);				// horizontal line
		GLCD_Line(x2,y1,x2,y2);
		GLCD_Line(x1,y1,x2,y1);				// vertical line
		GLCD_Line(x1,y2,x2,y2);
     63c:	98 2f       	mov	r25, r24
     63e:	96 95       	lsr	r25
     640:	96 95       	lsr	r25
     642:	96 95       	lsr	r25
     644:	87 70       	andi	r24, 0x07	; 7
     646:	a1 f0       	breq	.+40     	; 0x670 <GLCD_Dot.part.0+0x34>
     648:	81 30       	cpi	r24, 0x01	; 1
     64a:	09 f4       	brne	.+2      	; 0x64e <GLCD_Dot.part.0+0x12>
     64c:	57 c0       	rjmp	.+174    	; 0x6fc <GLCD_Dot.part.0+0xc0>
     64e:	82 30       	cpi	r24, 0x02	; 2
     650:	09 f4       	brne	.+2      	; 0x654 <GLCD_Dot.part.0+0x18>
     652:	58 c0       	rjmp	.+176    	; 0x704 <GLCD_Dot.part.0+0xc8>
     654:	83 30       	cpi	r24, 0x03	; 3
     656:	09 f4       	brne	.+2      	; 0x65a <GLCD_Dot.part.0+0x1e>
     658:	53 c0       	rjmp	.+166    	; 0x700 <GLCD_Dot.part.0+0xc4>
     65a:	84 30       	cpi	r24, 0x04	; 4
     65c:	09 f4       	brne	.+2      	; 0x660 <GLCD_Dot.part.0+0x24>
     65e:	54 c0       	rjmp	.+168    	; 0x708 <GLCD_Dot.part.0+0xcc>
     660:	85 30       	cpi	r24, 0x05	; 5
     662:	09 f4       	brne	.+2      	; 0x666 <GLCD_Dot.part.0+0x2a>
     664:	53 c0       	rjmp	.+166    	; 0x70c <GLCD_Dot.part.0+0xd0>
     666:	86 30       	cpi	r24, 0x06	; 6
     668:	09 f4       	brne	.+2      	; 0x66c <GLCD_Dot.part.0+0x30>
     66a:	52 c0       	rjmp	.+164    	; 0x710 <GLCD_Dot.part.0+0xd4>
     66c:	80 e8       	ldi	r24, 0x80	; 128
     66e:	01 c0       	rjmp	.+2      	; 0x672 <GLCD_Dot.part.0+0x36>
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	20 e8       	ldi	r18, 0x80	; 128
     674:	92 9f       	mul	r25, r18
     676:	f0 01       	movw	r30, r0
     678:	11 24       	eor	r1, r1
     67a:	e1 5c       	subi	r30, 0xC1	; 193
     67c:	fc 4f       	sbci	r31, 0xFC	; 252
     67e:	e6 0f       	add	r30, r22
     680:	f1 1d       	adc	r31, r1
     682:	20 81       	ld	r18, Z
     684:	82 2b       	or	r24, r18
     686:	80 83       	st	Z, r24
     688:	98 54       	subi	r25, 0x48	; 72
     68a:	9b bb       	out	0x1b, r25	; 27
     68c:	1c 98       	cbi	0x03, 4	; 3
     68e:	1e 9a       	sbi	0x03, 6	; 3
     690:	1f 9a       	sbi	0x03, 7	; 3
     692:	1d 9a       	sbi	0x03, 5	; 3
     694:	1d 98       	cbi	0x03, 5	; 3
     696:	85 e3       	ldi	r24, 0x35	; 53
     698:	8a 95       	dec	r24
     69a:	f1 f7       	brne	.-4      	; 0x698 <GLCD_Dot.part.0+0x5c>
     69c:	00 00       	nop
     69e:	60 34       	cpi	r22, 0x40	; 64
     6a0:	b0 f0       	brcs	.+44     	; 0x6ce <GLCD_Dot.part.0+0x92>
     6a2:	6b bb       	out	0x1b, r22	; 27
     6a4:	1c 98       	cbi	0x03, 4	; 3
     6a6:	1e 9a       	sbi	0x03, 6	; 3
     6a8:	1f 98       	cbi	0x03, 7	; 3
     6aa:	1d 9a       	sbi	0x03, 5	; 3
     6ac:	1d 98       	cbi	0x03, 5	; 3
     6ae:	25 e3       	ldi	r18, 0x35	; 53
     6b0:	2a 95       	dec	r18
     6b2:	f1 f7       	brne	.-4      	; 0x6b0 <GLCD_Dot.part.0+0x74>
     6b4:	00 00       	nop
     6b6:	80 81       	ld	r24, Z
     6b8:	8b bb       	out	0x1b, r24	; 27
     6ba:	1c 9a       	sbi	0x03, 4	; 3
     6bc:	1e 9a       	sbi	0x03, 6	; 3
     6be:	1f 98       	cbi	0x03, 7	; 3
     6c0:	1d 9a       	sbi	0x03, 5	; 3
     6c2:	1d 98       	cbi	0x03, 5	; 3
     6c4:	85 e3       	ldi	r24, 0x35	; 53
     6c6:	8a 95       	dec	r24
     6c8:	f1 f7       	brne	.-4      	; 0x6c6 <GLCD_Dot.part.0+0x8a>
     6ca:	00 00       	nop
     6cc:	08 95       	ret
     6ce:	60 5c       	subi	r22, 0xC0	; 192
     6d0:	6b bb       	out	0x1b, r22	; 27
     6d2:	1c 98       	cbi	0x03, 4	; 3
     6d4:	1e 98       	cbi	0x03, 6	; 3
     6d6:	1f 9a       	sbi	0x03, 7	; 3
     6d8:	1d 9a       	sbi	0x03, 5	; 3
     6da:	1d 98       	cbi	0x03, 5	; 3
     6dc:	25 e3       	ldi	r18, 0x35	; 53
     6de:	2a 95       	dec	r18
     6e0:	f1 f7       	brne	.-4      	; 0x6de <GLCD_Dot.part.0+0xa2>
     6e2:	00 00       	nop
     6e4:	80 81       	ld	r24, Z
     6e6:	8b bb       	out	0x1b, r24	; 27
     6e8:	1c 9a       	sbi	0x03, 4	; 3
     6ea:	1e 98       	cbi	0x03, 6	; 3
     6ec:	1f 9a       	sbi	0x03, 7	; 3
     6ee:	1d 9a       	sbi	0x03, 5	; 3
     6f0:	1d 98       	cbi	0x03, 5	; 3
     6f2:	85 e3       	ldi	r24, 0x35	; 53
     6f4:	8a 95       	dec	r24
     6f6:	f1 f7       	brne	.-4      	; 0x6f4 <GLCD_Dot.part.0+0xb8>
     6f8:	00 00       	nop
     6fa:	08 95       	ret
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	b9 cf       	rjmp	.-142    	; 0x672 <GLCD_Dot.part.0+0x36>
     700:	88 e0       	ldi	r24, 0x08	; 8
     702:	b7 cf       	rjmp	.-146    	; 0x672 <GLCD_Dot.part.0+0x36>
     704:	84 e0       	ldi	r24, 0x04	; 4
     706:	b5 cf       	rjmp	.-150    	; 0x672 <GLCD_Dot.part.0+0x36>
     708:	80 e1       	ldi	r24, 0x10	; 16
     70a:	b3 cf       	rjmp	.-154    	; 0x672 <GLCD_Dot.part.0+0x36>
     70c:	80 e2       	ldi	r24, 0x20	; 32
     70e:	b1 cf       	rjmp	.-158    	; 0x672 <GLCD_Dot.part.0+0x36>
     710:	80 e4       	ldi	r24, 0x40	; 64
     712:	af cf       	rjmp	.-162    	; 0x672 <GLCD_Dot.part.0+0x36>

00000714 <lcd_clear>:
     714:	98 eb       	ldi	r25, 0xB8	; 184
     716:	20 e4       	ldi	r18, 0x40	; 64
     718:	9b bb       	out	0x1b, r25	; 27
     71a:	1c 98       	cbi	0x03, 4	; 3
     71c:	1e 9a       	sbi	0x03, 6	; 3
     71e:	1f 9a       	sbi	0x03, 7	; 3
     720:	1d 9a       	sbi	0x03, 5	; 3
     722:	1d 98       	cbi	0x03, 5	; 3
     724:	35 e3       	ldi	r19, 0x35	; 53
     726:	3a 95       	dec	r19
     728:	f1 f7       	brne	.-4      	; 0x726 <lcd_clear+0x12>
     72a:	00 00       	nop
     72c:	2b bb       	out	0x1b, r18	; 27
     72e:	1c 98       	cbi	0x03, 4	; 3
     730:	1e 9a       	sbi	0x03, 6	; 3
     732:	1f 9a       	sbi	0x03, 7	; 3
     734:	1d 9a       	sbi	0x03, 5	; 3
     736:	1d 98       	cbi	0x03, 5	; 3
     738:	85 e3       	ldi	r24, 0x35	; 53
     73a:	8a 95       	dec	r24
     73c:	f1 f7       	brne	.-4      	; 0x73a <lcd_clear+0x26>
     73e:	00 00       	nop
     740:	80 e4       	ldi	r24, 0x40	; 64
     742:	1b ba       	out	0x1b, r1	; 27
     744:	1c 9a       	sbi	0x03, 4	; 3
     746:	1e 9a       	sbi	0x03, 6	; 3
     748:	1f 9a       	sbi	0x03, 7	; 3
     74a:	1d 9a       	sbi	0x03, 5	; 3
     74c:	1d 98       	cbi	0x03, 5	; 3
     74e:	35 e3       	ldi	r19, 0x35	; 53
     750:	3a 95       	dec	r19
     752:	f1 f7       	brne	.-4      	; 0x750 <lcd_clear+0x3c>
     754:	00 00       	nop
     756:	81 50       	subi	r24, 0x01	; 1
     758:	a1 f7       	brne	.-24     	; 0x742 <lcd_clear+0x2e>
     75a:	9f 5f       	subi	r25, 0xFF	; 255
     75c:	90 3c       	cpi	r25, 0xC0	; 192
     75e:	e1 f6       	brne	.-72     	; 0x718 <lcd_clear+0x4>
     760:	08 95       	ret

00000762 <lcd_init>:
     762:	8f e3       	ldi	r24, 0x3F	; 63
     764:	8b bb       	out	0x1b, r24	; 27
     766:	1c 98       	cbi	0x03, 4	; 3
     768:	1e 9a       	sbi	0x03, 6	; 3
     76a:	1f 9a       	sbi	0x03, 7	; 3
     76c:	1d 9a       	sbi	0x03, 5	; 3
     76e:	1d 98       	cbi	0x03, 5	; 3
     770:	85 e3       	ldi	r24, 0x35	; 53
     772:	8a 95       	dec	r24
     774:	f1 f7       	brne	.-4      	; 0x772 <lcd_init+0x10>
     776:	00 00       	nop
     778:	80 ec       	ldi	r24, 0xC0	; 192
     77a:	8b bb       	out	0x1b, r24	; 27
     77c:	1c 98       	cbi	0x03, 4	; 3
     77e:	1e 9a       	sbi	0x03, 6	; 3
     780:	1f 9a       	sbi	0x03, 7	; 3
     782:	1d 9a       	sbi	0x03, 5	; 3
     784:	1d 98       	cbi	0x03, 5	; 3
     786:	85 e3       	ldi	r24, 0x35	; 53
     788:	8a 95       	dec	r24
     78a:	f1 f7       	brne	.-4      	; 0x788 <lcd_init+0x26>
     78c:	00 00       	nop
     78e:	88 eb       	ldi	r24, 0xB8	; 184
     790:	8b bb       	out	0x1b, r24	; 27
     792:	1c 98       	cbi	0x03, 4	; 3
     794:	1e 9a       	sbi	0x03, 6	; 3
     796:	1f 9a       	sbi	0x03, 7	; 3
     798:	1d 9a       	sbi	0x03, 5	; 3
     79a:	1d 98       	cbi	0x03, 5	; 3
     79c:	85 e3       	ldi	r24, 0x35	; 53
     79e:	8a 95       	dec	r24
     7a0:	f1 f7       	brne	.-4      	; 0x79e <lcd_init+0x3c>
     7a2:	00 00       	nop
     7a4:	80 e4       	ldi	r24, 0x40	; 64
     7a6:	8b bb       	out	0x1b, r24	; 27
     7a8:	1c 98       	cbi	0x03, 4	; 3
     7aa:	1e 9a       	sbi	0x03, 6	; 3
     7ac:	1f 9a       	sbi	0x03, 7	; 3
     7ae:	1d 9a       	sbi	0x03, 5	; 3
     7b0:	1d 98       	cbi	0x03, 5	; 3
     7b2:	85 e3       	ldi	r24, 0x35	; 53
     7b4:	8a 95       	dec	r24
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <lcd_init+0x52>
     7b8:	00 00       	nop
     7ba:	08 95       	ret

000007bc <lcd_char>:
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	80 97       	sbiw	r24, 0x20	; 32
     7c0:	fc 01       	movw	r30, r24
     7c2:	ee 0f       	add	r30, r30
     7c4:	ff 1f       	adc	r31, r31
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	e8 0f       	add	r30, r24
     7cc:	f9 1f       	adc	r31, r25
     7ce:	e3 5f       	subi	r30, 0xF3	; 243
     7d0:	fe 4f       	sbci	r31, 0xFE	; 254
     7d2:	85 e0       	ldi	r24, 0x05	; 5
     7d4:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <ychar>
     7d8:	9a 30       	cpi	r25, 0x0A	; 10
     7da:	f0 f4       	brcc	.+60     	; 0x818 <lcd_char+0x5c>
     7dc:	90 81       	ld	r25, Z
     7de:	9b bb       	out	0x1b, r25	; 27
     7e0:	1c 9a       	sbi	0x03, 4	; 3
     7e2:	1e 98       	cbi	0x03, 6	; 3
     7e4:	1f 9a       	sbi	0x03, 7	; 3
     7e6:	1d 9a       	sbi	0x03, 5	; 3
     7e8:	1d 98       	cbi	0x03, 5	; 3
     7ea:	95 e3       	ldi	r25, 0x35	; 53
     7ec:	9a 95       	dec	r25
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <lcd_char+0x30>
     7f0:	00 00       	nop
     7f2:	81 50       	subi	r24, 0x01	; 1
     7f4:	31 96       	adiw	r30, 0x01	; 1
     7f6:	81 11       	cpse	r24, r1
     7f8:	ed cf       	rjmp	.-38     	; 0x7d4 <lcd_char+0x18>
     7fa:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <ychar>
     7fe:	1b ba       	out	0x1b, r1	; 27
     800:	1c 9a       	sbi	0x03, 4	; 3
     802:	8a 30       	cpi	r24, 0x0A	; 10
     804:	a8 f0       	brcs	.+42     	; 0x830 <lcd_char+0x74>
     806:	1e 9a       	sbi	0x03, 6	; 3
     808:	1f 98       	cbi	0x03, 7	; 3
     80a:	1d 9a       	sbi	0x03, 5	; 3
     80c:	1d 98       	cbi	0x03, 5	; 3
     80e:	95 e3       	ldi	r25, 0x35	; 53
     810:	9a 95       	dec	r25
     812:	f1 f7       	brne	.-4      	; 0x810 <lcd_char+0x54>
     814:	00 00       	nop
     816:	08 95       	ret
     818:	90 81       	ld	r25, Z
     81a:	9b bb       	out	0x1b, r25	; 27
     81c:	1c 9a       	sbi	0x03, 4	; 3
     81e:	1e 9a       	sbi	0x03, 6	; 3
     820:	1f 98       	cbi	0x03, 7	; 3
     822:	1d 9a       	sbi	0x03, 5	; 3
     824:	1d 98       	cbi	0x03, 5	; 3
     826:	95 e3       	ldi	r25, 0x35	; 53
     828:	9a 95       	dec	r25
     82a:	f1 f7       	brne	.-4      	; 0x828 <lcd_char+0x6c>
     82c:	00 00       	nop
     82e:	e1 cf       	rjmp	.-62     	; 0x7f2 <lcd_char+0x36>
     830:	1e 98       	cbi	0x03, 6	; 3
     832:	1f 9a       	sbi	0x03, 7	; 3
     834:	1d 9a       	sbi	0x03, 5	; 3
     836:	1d 98       	cbi	0x03, 5	; 3
     838:	85 e3       	ldi	r24, 0x35	; 53
     83a:	8a 95       	dec	r24
     83c:	f1 f7       	brne	.-4      	; 0x83a <lcd_char+0x7e>
     83e:	00 00       	nop
     840:	08 95       	ret

00000842 <lcd_string>:
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	ea 01       	movw	r28, r20
     84a:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <xchar>
     84e:	60 93 3f 07 	sts	0x073F, r22	; 0x80073f <ychar>
     852:	88 54       	subi	r24, 0x48	; 72
     854:	8b bb       	out	0x1b, r24	; 27
     856:	1c 98       	cbi	0x03, 4	; 3
     858:	1e 9a       	sbi	0x03, 6	; 3
     85a:	1f 9a       	sbi	0x03, 7	; 3
     85c:	1d 9a       	sbi	0x03, 5	; 3
     85e:	1d 98       	cbi	0x03, 5	; 3
     860:	85 e3       	ldi	r24, 0x35	; 53
     862:	8a 95       	dec	r24
     864:	f1 f7       	brne	.-4      	; 0x862 <lcd_string+0x20>
     866:	00 00       	nop
     868:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <ychar>
     86c:	8a 30       	cpi	r24, 0x0A	; 10
     86e:	a0 f1       	brcs	.+104    	; 0x8d8 <lcd_string+0x96>
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0a 97       	sbiw	r24, 0x0a	; 10
     874:	98 2f       	mov	r25, r24
     876:	99 0f       	add	r25, r25
     878:	89 0f       	add	r24, r25
     87a:	88 0f       	add	r24, r24
     87c:	80 5c       	subi	r24, 0xC0	; 192
     87e:	8b bb       	out	0x1b, r24	; 27
     880:	1c 98       	cbi	0x03, 4	; 3
     882:	1e 9a       	sbi	0x03, 6	; 3
     884:	1f 98       	cbi	0x03, 7	; 3
     886:	1d 9a       	sbi	0x03, 5	; 3
     888:	1d 98       	cbi	0x03, 5	; 3
     88a:	85 e3       	ldi	r24, 0x35	; 53
     88c:	8a 95       	dec	r24
     88e:	f1 f7       	brne	.-4      	; 0x88c <lcd_string+0x4a>
     890:	00 00       	nop
     892:	88 81       	ld	r24, Y
     894:	88 23       	and	r24, r24
     896:	e1 f0       	breq	.+56     	; 0x8d0 <lcd_string+0x8e>
     898:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <ychar>
     89c:	10 e4       	ldi	r17, 0x40	; 64
     89e:	0a c0       	rjmp	.+20     	; 0x8b4 <lcd_string+0x72>
     8a0:	8d df       	rcall	.-230    	; 0x7bc <lcd_char>
     8a2:	21 96       	adiw	r28, 0x01	; 1
     8a4:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <ychar>
     8a8:	9f 5f       	subi	r25, 0xFF	; 255
     8aa:	90 93 3f 07 	sts	0x073F, r25	; 0x80073f <ychar>
     8ae:	88 81       	ld	r24, Y
     8b0:	88 23       	and	r24, r24
     8b2:	71 f0       	breq	.+28     	; 0x8d0 <lcd_string+0x8e>
     8b4:	9a 30       	cpi	r25, 0x0A	; 10
     8b6:	a1 f7       	brne	.-24     	; 0x8a0 <lcd_string+0x5e>
     8b8:	1b bb       	out	0x1b, r17	; 27
     8ba:	1c 98       	cbi	0x03, 4	; 3
     8bc:	1e 9a       	sbi	0x03, 6	; 3
     8be:	1f 98       	cbi	0x03, 7	; 3
     8c0:	1d 9a       	sbi	0x03, 5	; 3
     8c2:	1d 98       	cbi	0x03, 5	; 3
     8c4:	85 e3       	ldi	r24, 0x35	; 53
     8c6:	8a 95       	dec	r24
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <lcd_string+0x84>
     8ca:	00 00       	nop
     8cc:	88 81       	ld	r24, Y
     8ce:	e8 cf       	rjmp	.-48     	; 0x8a0 <lcd_string+0x5e>
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	08 95       	ret
     8d8:	98 2f       	mov	r25, r24
     8da:	99 0f       	add	r25, r25
     8dc:	89 0f       	add	r24, r25
     8de:	88 0f       	add	r24, r24
     8e0:	8c 5b       	subi	r24, 0xBC	; 188
     8e2:	8b bb       	out	0x1b, r24	; 27
     8e4:	1c 98       	cbi	0x03, 4	; 3
     8e6:	1e 98       	cbi	0x03, 6	; 3
     8e8:	1f 9a       	sbi	0x03, 7	; 3
     8ea:	1d 9a       	sbi	0x03, 5	; 3
     8ec:	1d 98       	cbi	0x03, 5	; 3
     8ee:	85 e3       	ldi	r24, 0x35	; 53
     8f0:	8a 95       	dec	r24
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <lcd_string+0xae>
     8f4:	00 00       	nop
     8f6:	cd cf       	rjmp	.-102    	; 0x892 <lcd_string+0x50>

000008f8 <ScreenBuffer_clear>:
     8f8:	ef e3       	ldi	r30, 0x3F	; 63
     8fa:	f3 e0       	ldi	r31, 0x03	; 3
     8fc:	2f e3       	ldi	r18, 0x3F	; 63
     8fe:	37 e0       	ldi	r19, 0x07	; 7
     900:	cf 01       	movw	r24, r30
     902:	80 58       	subi	r24, 0x80	; 128
     904:	9f 4f       	sbci	r25, 0xFF	; 255
     906:	11 92       	st	Z+, r1
     908:	e8 17       	cp	r30, r24
     90a:	f9 07       	cpc	r31, r25
     90c:	e1 f7       	brne	.-8      	; 0x906 <ScreenBuffer_clear+0xe>
     90e:	2e 17       	cp	r18, r30
     910:	3f 07       	cpc	r19, r31
     912:	b1 f7       	brne	.-20     	; 0x900 <ScreenBuffer_clear+0x8>
     914:	08 95       	ret

00000916 <GLCD_Circle>:
	}

	// draw a circle
	void GLCD_Circle(unsigned char x1,unsigned char y1,unsigned char r)
	{
     916:	3f 92       	push	r3
     918:	4f 92       	push	r4
     91a:	5f 92       	push	r5
     91c:	6f 92       	push	r6
     91e:	7f 92       	push	r7
     920:	8f 92       	push	r8
     922:	9f 92       	push	r9
     924:	af 92       	push	r10
     926:	bf 92       	push	r11
     928:	cf 92       	push	r12
     92a:	df 92       	push	r13
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	e8 2e       	mov	r14, r24
     93a:	46 2e       	mov	r4, r22
     93c:	54 2e       	mov	r5, r20
		int x, y;
		float s;
		for(y = y1 - r*3/4; y <= y1 + r*3/4; y++) // draw with y variable
     93e:	a6 2e       	mov	r10, r22
     940:	b1 2c       	mov	r11, r1
     942:	84 2f       	mov	r24, r20
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	6c 01       	movw	r12, r24
     948:	cc 0c       	add	r12, r12
     94a:	dd 1c       	adc	r13, r13
     94c:	c8 0e       	add	r12, r24
     94e:	d9 1e       	adc	r13, r25
     950:	e6 01       	movw	r28, r12
     952:	d7 fc       	sbrc	r13, 7
     954:	9b c0       	rjmp	.+310    	; 0xa8c <GLCD_Circle+0x176>
     956:	d5 95       	asr	r29
     958:	c7 95       	ror	r28
     95a:	d5 95       	asr	r29
     95c:	c7 95       	ror	r28
     95e:	00 27       	eor	r16, r16
     960:	11 27       	eor	r17, r17
     962:	0c 1b       	sub	r16, r28
     964:	1d 0b       	sbc	r17, r29
     966:	e5 01       	movw	r28, r10
     968:	c0 0f       	add	r28, r16
     96a:	d1 1f       	adc	r29, r17
     96c:	d5 94       	asr	r13
     96e:	c7 94       	ror	r12
     970:	d5 94       	asr	r13
     972:	c7 94       	ror	r12
     974:	45 01       	movw	r8, r10
     976:	8c 0c       	add	r8, r12
     978:	9d 1c       	adc	r9, r13
     97a:	8c 16       	cp	r8, r28
     97c:	9d 06       	cpc	r9, r29
     97e:	0c f4       	brge	.+2      	; 0x982 <GLCD_Circle+0x6c>
     980:	3a c0       	rjmp	.+116    	; 0x9f6 <GLCD_Circle+0xe0>
     982:	55 9c       	mul	r5, r5
     984:	30 01       	movw	r6, r0
     986:	11 24       	eor	r1, r1
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <GLCD_Circle+0x90>
	void GLCD_Dot(unsigned char xx, unsigned char y)
	{
		unsigned char x, i;
		
		// check resolution (128.64)
		if((xx > 63) || (y > 127)) return;
     98a:	c7 fd       	sbrc	r28, 7
     98c:	08 c0       	rjmp	.+16     	; 0x99e <GLCD_Circle+0x88>
     98e:	6c 2f       	mov	r22, r28
     990:	55 de       	rcall	.-854    	; 0x63c <GLCD_Dot.part.0>
     992:	8e 2d       	mov	r24, r14
     994:	8f 19       	sub	r24, r15
     996:	80 34       	cpi	r24, 0x40	; 64
     998:	10 f4       	brcc	.+4      	; 0x99e <GLCD_Circle+0x88>
     99a:	63 2d       	mov	r22, r3
     99c:	4f de       	rcall	.-866    	; 0x63c <GLCD_Dot.part.0>
	// draw a circle
	void GLCD_Circle(unsigned char x1,unsigned char y1,unsigned char r)
	{
		int x, y;
		float s;
		for(y = y1 - r*3/4; y <= y1 + r*3/4; y++) // draw with y variable
     99e:	21 96       	adiw	r28, 0x01	; 1
     9a0:	8c 16       	cp	r8, r28
     9a2:	9d 06       	cpc	r9, r29
     9a4:	44 f1       	brlt	.+80     	; 0x9f6 <GLCD_Circle+0xe0>
     9a6:	ce 01       	movw	r24, r28
     9a8:	8a 19       	sub	r24, r10
     9aa:	9b 09       	sbc	r25, r11
		{
			s = sqrt(r*r - (y-y1)*(y-y1)) + 0.5;
     9ac:	88 9f       	mul	r24, r24
     9ae:	90 01       	movw	r18, r0
     9b0:	89 9f       	mul	r24, r25
     9b2:	30 0d       	add	r19, r0
     9b4:	30 0d       	add	r19, r0
     9b6:	11 24       	eor	r1, r1
     9b8:	b3 01       	movw	r22, r6
     9ba:	62 1b       	sub	r22, r18
     9bc:	73 0b       	sbc	r23, r19
     9be:	07 2e       	mov	r0, r23
     9c0:	00 0c       	add	r0, r0
     9c2:	88 0b       	sbc	r24, r24
     9c4:	99 0b       	sbc	r25, r25
     9c6:	60 d1       	rcall	.+704    	; 0xc88 <__floatsisf>
     9c8:	ef d1       	rcall	.+990    	; 0xda8 <sqrt>
			x = x1 + (unsigned char)s;
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e0       	ldi	r20, 0x00	; 0
     9d0:	5f e3       	ldi	r21, 0x3F	; 63
     9d2:	c8 d0       	rcall	.+400    	; 0xb64 <__addsf3>
     9d4:	2b d1       	rcall	.+598    	; 0xc2c <__fixunssfsi>
     9d6:	f6 2e       	mov	r15, r22
			GLCD_Dot(x,y);
     9d8:	3c 2e       	mov	r3, r28
     9da:	8e 2d       	mov	r24, r14
     9dc:	8f 0d       	add	r24, r15
	void GLCD_Dot(unsigned char xx, unsigned char y)
	{
		unsigned char x, i;
		
		// check resolution (128.64)
		if((xx > 63) || (y > 127)) return;
     9de:	80 34       	cpi	r24, 0x40	; 64
     9e0:	a0 f2       	brcs	.-88     	; 0x98a <GLCD_Circle+0x74>
     9e2:	8e 2d       	mov	r24, r14
     9e4:	8f 19       	sub	r24, r15
     9e6:	80 34       	cpi	r24, 0x40	; 64
     9e8:	d0 f6       	brcc	.-76     	; 0x99e <GLCD_Circle+0x88>
     9ea:	c7 ff       	sbrs	r28, 7
     9ec:	d6 cf       	rjmp	.-84     	; 0x99a <GLCD_Circle+0x84>
	// draw a circle
	void GLCD_Circle(unsigned char x1,unsigned char y1,unsigned char r)
	{
		int x, y;
		float s;
		for(y = y1 - r*3/4; y <= y1 + r*3/4; y++) // draw with y variable
     9ee:	21 96       	adiw	r28, 0x01	; 1
     9f0:	8c 16       	cp	r8, r28
     9f2:	9d 06       	cpc	r9, r29
     9f4:	c4 f6       	brge	.-80     	; 0x9a6 <GLCD_Circle+0x90>
			x = x1 + (unsigned char)s;
			GLCD_Dot(x,y);
			x = x1 - (unsigned char)s;
			GLCD_Dot(x,y);
		}
		for(x = x1 - r*3/4; x <= x1 + r*3/4; x++) // draw with x variable
     9f6:	f1 2c       	mov	r15, r1
     9f8:	e8 01       	movw	r28, r16
     9fa:	ce 0d       	add	r28, r14
     9fc:	df 1d       	adc	r29, r15
     9fe:	ce 0c       	add	r12, r14
     a00:	df 1c       	adc	r13, r15
     a02:	cc 16       	cp	r12, r28
     a04:	dd 06       	cpc	r13, r29
     a06:	84 f1       	brlt	.+96     	; 0xa68 <GLCD_Circle+0x152>
     a08:	55 9c       	mul	r5, r5
     a0a:	80 01       	movw	r16, r0
     a0c:	11 24       	eor	r1, r1
     a0e:	ce 01       	movw	r24, r28
     a10:	8e 19       	sub	r24, r14
     a12:	9f 09       	sbc	r25, r15
		{
			s = sqrt(r*r - (x-x1)*(x-x1)) + 0.5;
     a14:	88 9f       	mul	r24, r24
     a16:	90 01       	movw	r18, r0
     a18:	89 9f       	mul	r24, r25
     a1a:	30 0d       	add	r19, r0
     a1c:	30 0d       	add	r19, r0
     a1e:	11 24       	eor	r1, r1
     a20:	b8 01       	movw	r22, r16
     a22:	62 1b       	sub	r22, r18
     a24:	73 0b       	sbc	r23, r19
     a26:	07 2e       	mov	r0, r23
     a28:	00 0c       	add	r0, r0
     a2a:	88 0b       	sbc	r24, r24
     a2c:	99 0b       	sbc	r25, r25
     a2e:	2c d1       	rcall	.+600    	; 0xc88 <__floatsisf>
     a30:	bb d1       	rcall	.+886    	; 0xda8 <sqrt>
	void GLCD_Dot(unsigned char xx, unsigned char y)
	{
		unsigned char x, i;
		
		// check resolution (128.64)
		if((xx > 63) || (y > 127)) return;
     a32:	bc 2e       	mov	r11, r28
     a34:	2f e3       	ldi	r18, 0x3F	; 63
			GLCD_Dot(x,y);
		}
		for(x = x1 - r*3/4; x <= x1 + r*3/4; x++) // draw with x variable
		{
			s = sqrt(r*r - (x-x1)*(x-x1)) + 0.5;
			y = y1 + (unsigned char)s;
     a36:	2c 17       	cp	r18, r28
     a38:	98 f0       	brcs	.+38     	; 0xa60 <GLCD_Circle+0x14a>
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	40 e0       	ldi	r20, 0x00	; 0
     a40:	5f e3       	ldi	r21, 0x3F	; 63
     a42:	90 d0       	rcall	.+288    	; 0xb64 <__addsf3>
     a44:	f3 d0       	rcall	.+486    	; 0xc2c <__fixunssfsi>
     a46:	a6 2e       	mov	r10, r22
     a48:	64 2d       	mov	r22, r4
	void GLCD_Dot(unsigned char xx, unsigned char y)
	{
		unsigned char x, i;
		
		// check resolution (128.64)
		if((xx > 63) || (y > 127)) return;
     a4a:	6a 0d       	add	r22, r10
     a4c:	67 fd       	sbrc	r22, 7
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <GLCD_Circle+0x13e>
     a50:	8c 2f       	mov	r24, r28
     a52:	f4 dd       	rcall	.-1048   	; 0x63c <GLCD_Dot.part.0>
     a54:	64 2d       	mov	r22, r4
     a56:	6a 19       	sub	r22, r10
     a58:	67 fd       	sbrc	r22, 7
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <GLCD_Circle+0x14a>
     a5c:	8b 2d       	mov	r24, r11
     a5e:	ee dd       	rcall	.-1060   	; 0x63c <GLCD_Dot.part.0>
     a60:	21 96       	adiw	r28, 0x01	; 1
			x = x1 + (unsigned char)s;
			GLCD_Dot(x,y);
			x = x1 - (unsigned char)s;
			GLCD_Dot(x,y);
		}
		for(x = x1 - r*3/4; x <= x1 + r*3/4; x++) // draw with x variable
     a62:	cc 16       	cp	r12, r28
     a64:	dd 06       	cpc	r13, r29
     a66:	9c f6       	brge	.-90     	; 0xa0e <GLCD_Circle+0xf8>
     a68:	df 91       	pop	r29
			y = y1 + (unsigned char)s;
			GLCD_Dot(x,y);
			y = y1 - (unsigned char)s;
			GLCD_Dot(x,y);
		}
	}
     a6a:	cf 91       	pop	r28
     a6c:	1f 91       	pop	r17
     a6e:	0f 91       	pop	r16
     a70:	ff 90       	pop	r15
     a72:	ef 90       	pop	r14
     a74:	df 90       	pop	r13
     a76:	cf 90       	pop	r12
     a78:	bf 90       	pop	r11
     a7a:	af 90       	pop	r10
     a7c:	9f 90       	pop	r9
     a7e:	8f 90       	pop	r8
     a80:	7f 90       	pop	r7
     a82:	6f 90       	pop	r6
     a84:	5f 90       	pop	r5
     a86:	4f 90       	pop	r4
     a88:	3f 90       	pop	r3
     a8a:	08 95       	ret
     a8c:	23 96       	adiw	r28, 0x03	; 3
	// draw a circle
	void GLCD_Circle(unsigned char x1,unsigned char y1,unsigned char r)
	{
		int x, y;
		float s;
		for(y = y1 - r*3/4; y <= y1 + r*3/4; y++) // draw with y variable
     a8e:	63 cf       	rjmp	.-314    	; 0x956 <GLCD_Circle+0x40>

00000a90 <init_devices>:
#include "_glcd.h"


void init_devices(void)	// 초기화 함수를 여기에 넣습니다.
{
	cli(); //disable all interrupts
     a90:	f8 94       	cli

	Port_init();		// Port 초기화
     a92:	0e d0       	rcall	.+28     	; 0xab0 <Port_init>
	Interrupt_init();
     a94:	06 d0       	rcall	.+12     	; 0xaa2 <Interrupt_init>
	Timer2_init();  	// 타이머/카운터2의 초기화
     a96:	1a d0       	rcall	.+52     	; 0xacc <Timer2_init>
	Uart1_init();
     a98:	4f d0       	rcall	.+158    	; 0xb38 <Uart1_init>
     a9a:	7a dd       	rcall	.-1292   	; 0x590 <Adc_init>
	Adc_init();
     a9c:	62 de       	rcall	.-828    	; 0x762 <lcd_init>
     a9e:	78 94       	sei
	lcd_init();          // initialize GLCD
     aa0:	08 95       	ret

00000aa2 <Interrupt_init>:
   3. EIMSK: INT7 INT6 INT5 INT4 INT3 INT2 INT1 INT0
   4. SREG: SEI 
*/
void Interrupt_init(void) 	// Port initialization
{
	EICRA = 0x0A; 		// INT0~1, Falling edge
     aa2:	8a e0       	ldi	r24, 0x0A	; 10
     aa4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = 0x00; 		// INT4~7, Unused
     aa8:	1a be       	out	0x3a, r1	; 58
	EIMSK = (1<<INT1) | (1<<INT0) ; // EIMSK = 0x03;
     aaa:	83 e0       	ldi	r24, 0x03	; 3
     aac:	89 bf       	out	0x39, r24	; 57
     aae:	08 95       	ret

00000ab0 <Port_init>:
	//PORTC = 0x00; 	DDRC = 0xF0;			// PORTC 상위 4bit 입력, 하위 4bit 출력
	//PORTD = 0x80;	DDRD = 0b10000000;		// 핀의 입출력 설정
	//PORTE = 0x00; 	DDRE = 0xFF;			// PORTE 출력 LOW ,핀의 출력 설정
	//PORTF = 0x00; 	DDRF = 0x00;			// PORTE 출력 LOW ,핀의 출력 설정
	
	PORTA = 0x00; 	DDRA = 0xFF;			// PA: D
     ab0:	1b ba       	out	0x1b, r1	; 27
     ab2:	8f ef       	ldi	r24, 0xFF	; 255
     ab4:	8a bb       	out	0x1a, r24	; 26
	PORTB = 0xFF; 	DDRB = 0xFF;			// PB: LED
     ab6:	88 bb       	out	0x18, r24	; 24
     ab8:	87 bb       	out	0x17, r24	; 23
	PORTD = 0x00;	DDRD = 0x00;			// PD: button
     aba:	12 ba       	out	0x12, r1	; 18
     abc:	11 ba       	out	0x11, r1	; 17
	PORTE = 0x00; 	DDRE = 0xFF;			// PE4: R/S, PE5: E, PE6: CS2, PE7: CS1
     abe:	13 b8       	out	0x03, r1	; 3
     ac0:	82 b9       	out	0x02, r24	; 2
	PORTG = 0x00;	DDRG = 0xFF;			// PG4: Buzzer
     ac2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ac6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     aca:	08 95       	ret

00000acc <Timer2_init>:
   TCNT2
*/

void Timer2_init(void)		// T/C 2 initialization
{
	TCCR2 = 0x00;			// stop    
     acc:	15 bc       	out	0x25, r1	; 37
	TCNT2 = 0x1A;			// setup   
     ace:	8a e1       	ldi	r24, 0x1A	; 26
     ad0:	84 bd       	out	0x24, r24	; 36
	TCCR2 = 0x03;			// start, Fosc/64
     ad2:	83 e0       	ldi	r24, 0x03	; 3
     ad4:	85 bd       	out	0x25, r24	; 37
	TIMSK = 0x40;           // enable TOV2
     ad6:	80 e4       	ldi	r24, 0x40	; 64
     ad8:	87 bf       	out	0x37, r24	; 55
     ada:	08 95       	ret

00000adc <__vector_10>:
}

SIGNAL(TIMER2_OVF_vect)
{
     adc:	1f 92       	push	r1
     ade:	0f 92       	push	r0
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	0f 92       	push	r0
     ae4:	11 24       	eor	r1, r1
     ae6:	2f 93       	push	r18
     ae8:	3f 93       	push	r19
     aea:	8f 93       	push	r24
     aec:	9f 93       	push	r25
	TCNT2 = 0x1A;                           // From 26 to 256, 	230 X 4 times
     aee:	8a e1       	ldi	r24, 0x1A	; 26
     af0:	84 bd       	out	0x24, r24	; 36
	// setup (4.3402uS)
	Count_Of_Timer2++; 						
     af2:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <Count_Of_Timer2>
     af6:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <Count_Of_Timer2+0x1>
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <Count_Of_Timer2+0x1>
     b00:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <Count_Of_Timer2>

	if(Count_Of_Timer2 == Time_Of_Timer2)   // 1ms×500 = 500ms
     b04:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <Time_Of_Timer2>
     b08:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <Time_Of_Timer2+0x1>
     b0c:	82 17       	cp	r24, r18
     b0e:	93 07       	cpc	r25, r19
     b10:	51 f4       	brne	.+20     	; 0xb26 <__vector_10+0x4a>
	{
		Task1_Of_Timer2 = 1;				// Task1_Of_Timer2=1 at every 500ms
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <Task1_Of_Timer2+0x1>
     b1a:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <Task1_Of_Timer2>
		Count_Of_Timer2 = 0;				// Initialize counter
     b1e:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <Count_Of_Timer2+0x1>
     b22:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <Count_Of_Timer2>
	}
     b26:	9f 91       	pop	r25
     b28:	8f 91       	pop	r24
     b2a:	3f 91       	pop	r19
     b2c:	2f 91       	pop	r18
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	0f 90       	pop	r0
     b34:	1f 90       	pop	r1
     b36:	18 95       	reti

00000b38 <Uart1_init>:
char Tap[]={"\t"};              				// Tab

void Uart1_init(void)							// UART initialization
{
	// setting URT1 8N1 mode
	UCSR1A = 0x00;								// U2X=0 lowest baud rate for NYUBRR
     b38:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);			// character size 8
     b3c:	86 e0       	ldi	r24, 0x06	; 6
     b3e:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UCSR1B = (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1); // 0x98
     b42:	88 e9       	ldi	r24, 0x98	; 152
     b44:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	// RXCIE1(receive complete interrupt enable), RXEN1(receive enable), TXEN1(transmit enable)
	ubrr =  F_CPU/16/BAUD-1;
     b48:	87 e6       	ldi	r24, 0x67	; 103
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	90 93 41 07 	sts	0x0741, r25	; 0x800741 <ubrr+0x1>
     b50:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <ubrr>
	UBRR1H = (ubrr>>8);				// MSB of MYUBRR
     b54:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = ubrr;					// LSB of MYUBRR
     b58:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <ubrr>
     b5c:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     b60:	08 95       	ret

00000b62 <__subsf3>:
     b62:	50 58       	subi	r21, 0x80	; 128

00000b64 <__addsf3>:
     b64:	bb 27       	eor	r27, r27
     b66:	aa 27       	eor	r26, r26
     b68:	0e d0       	rcall	.+28     	; 0xb86 <__addsf3x>
     b6a:	e0 c0       	rjmp	.+448    	; 0xd2c <__fp_round>
     b6c:	d1 d0       	rcall	.+418    	; 0xd10 <__fp_pscA>
     b6e:	30 f0       	brcs	.+12     	; 0xb7c <__addsf3+0x18>
     b70:	d6 d0       	rcall	.+428    	; 0xd1e <__fp_pscB>
     b72:	20 f0       	brcs	.+8      	; 0xb7c <__addsf3+0x18>
     b74:	31 f4       	brne	.+12     	; 0xb82 <__addsf3+0x1e>
     b76:	9f 3f       	cpi	r25, 0xFF	; 255
     b78:	11 f4       	brne	.+4      	; 0xb7e <__addsf3+0x1a>
     b7a:	1e f4       	brtc	.+6      	; 0xb82 <__addsf3+0x1e>
     b7c:	c6 c0       	rjmp	.+396    	; 0xd0a <__fp_nan>
     b7e:	0e f4       	brtc	.+2      	; 0xb82 <__addsf3+0x1e>
     b80:	e0 95       	com	r30
     b82:	e7 fb       	bst	r30, 7
     b84:	bc c0       	rjmp	.+376    	; 0xcfe <__fp_inf>

00000b86 <__addsf3x>:
     b86:	e9 2f       	mov	r30, r25
     b88:	e2 d0       	rcall	.+452    	; 0xd4e <__fp_split3>
     b8a:	80 f3       	brcs	.-32     	; 0xb6c <__addsf3+0x8>
     b8c:	ba 17       	cp	r27, r26
     b8e:	62 07       	cpc	r22, r18
     b90:	73 07       	cpc	r23, r19
     b92:	84 07       	cpc	r24, r20
     b94:	95 07       	cpc	r25, r21
     b96:	18 f0       	brcs	.+6      	; 0xb9e <__addsf3x+0x18>
     b98:	71 f4       	brne	.+28     	; 0xbb6 <__addsf3x+0x30>
     b9a:	9e f5       	brtc	.+102    	; 0xc02 <__addsf3x+0x7c>
     b9c:	fa c0       	rjmp	.+500    	; 0xd92 <__fp_zero>
     b9e:	0e f4       	brtc	.+2      	; 0xba2 <__addsf3x+0x1c>
     ba0:	e0 95       	com	r30
     ba2:	0b 2e       	mov	r0, r27
     ba4:	ba 2f       	mov	r27, r26
     ba6:	a0 2d       	mov	r26, r0
     ba8:	0b 01       	movw	r0, r22
     baa:	b9 01       	movw	r22, r18
     bac:	90 01       	movw	r18, r0
     bae:	0c 01       	movw	r0, r24
     bb0:	ca 01       	movw	r24, r20
     bb2:	a0 01       	movw	r20, r0
     bb4:	11 24       	eor	r1, r1
     bb6:	ff 27       	eor	r31, r31
     bb8:	59 1b       	sub	r21, r25
     bba:	99 f0       	breq	.+38     	; 0xbe2 <__addsf3x+0x5c>
     bbc:	59 3f       	cpi	r21, 0xF9	; 249
     bbe:	50 f4       	brcc	.+20     	; 0xbd4 <__addsf3x+0x4e>
     bc0:	50 3e       	cpi	r21, 0xE0	; 224
     bc2:	68 f1       	brcs	.+90     	; 0xc1e <__addsf3x+0x98>
     bc4:	1a 16       	cp	r1, r26
     bc6:	f0 40       	sbci	r31, 0x00	; 0
     bc8:	a2 2f       	mov	r26, r18
     bca:	23 2f       	mov	r18, r19
     bcc:	34 2f       	mov	r19, r20
     bce:	44 27       	eor	r20, r20
     bd0:	58 5f       	subi	r21, 0xF8	; 248
     bd2:	f3 cf       	rjmp	.-26     	; 0xbba <__addsf3x+0x34>
     bd4:	46 95       	lsr	r20
     bd6:	37 95       	ror	r19
     bd8:	27 95       	ror	r18
     bda:	a7 95       	ror	r26
     bdc:	f0 40       	sbci	r31, 0x00	; 0
     bde:	53 95       	inc	r21
     be0:	c9 f7       	brne	.-14     	; 0xbd4 <__addsf3x+0x4e>
     be2:	7e f4       	brtc	.+30     	; 0xc02 <__addsf3x+0x7c>
     be4:	1f 16       	cp	r1, r31
     be6:	ba 0b       	sbc	r27, r26
     be8:	62 0b       	sbc	r22, r18
     bea:	73 0b       	sbc	r23, r19
     bec:	84 0b       	sbc	r24, r20
     bee:	ba f0       	brmi	.+46     	; 0xc1e <__addsf3x+0x98>
     bf0:	91 50       	subi	r25, 0x01	; 1
     bf2:	a1 f0       	breq	.+40     	; 0xc1c <__addsf3x+0x96>
     bf4:	ff 0f       	add	r31, r31
     bf6:	bb 1f       	adc	r27, r27
     bf8:	66 1f       	adc	r22, r22
     bfa:	77 1f       	adc	r23, r23
     bfc:	88 1f       	adc	r24, r24
     bfe:	c2 f7       	brpl	.-16     	; 0xbf0 <__addsf3x+0x6a>
     c00:	0e c0       	rjmp	.+28     	; 0xc1e <__addsf3x+0x98>
     c02:	ba 0f       	add	r27, r26
     c04:	62 1f       	adc	r22, r18
     c06:	73 1f       	adc	r23, r19
     c08:	84 1f       	adc	r24, r20
     c0a:	48 f4       	brcc	.+18     	; 0xc1e <__addsf3x+0x98>
     c0c:	87 95       	ror	r24
     c0e:	77 95       	ror	r23
     c10:	67 95       	ror	r22
     c12:	b7 95       	ror	r27
     c14:	f7 95       	ror	r31
     c16:	9e 3f       	cpi	r25, 0xFE	; 254
     c18:	08 f0       	brcs	.+2      	; 0xc1c <__addsf3x+0x96>
     c1a:	b3 cf       	rjmp	.-154    	; 0xb82 <__addsf3+0x1e>
     c1c:	93 95       	inc	r25
     c1e:	88 0f       	add	r24, r24
     c20:	08 f0       	brcs	.+2      	; 0xc24 <__addsf3x+0x9e>
     c22:	99 27       	eor	r25, r25
     c24:	ee 0f       	add	r30, r30
     c26:	97 95       	ror	r25
     c28:	87 95       	ror	r24
     c2a:	08 95       	ret

00000c2c <__fixunssfsi>:
     c2c:	98 d0       	rcall	.+304    	; 0xd5e <__fp_splitA>
     c2e:	88 f0       	brcs	.+34     	; 0xc52 <__fixunssfsi+0x26>
     c30:	9f 57       	subi	r25, 0x7F	; 127
     c32:	90 f0       	brcs	.+36     	; 0xc58 <__fixunssfsi+0x2c>
     c34:	b9 2f       	mov	r27, r25
     c36:	99 27       	eor	r25, r25
     c38:	b7 51       	subi	r27, 0x17	; 23
     c3a:	a0 f0       	brcs	.+40     	; 0xc64 <__fixunssfsi+0x38>
     c3c:	d1 f0       	breq	.+52     	; 0xc72 <__fixunssfsi+0x46>
     c3e:	66 0f       	add	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	88 1f       	adc	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	1a f0       	brmi	.+6      	; 0xc4e <__fixunssfsi+0x22>
     c48:	ba 95       	dec	r27
     c4a:	c9 f7       	brne	.-14     	; 0xc3e <__fixunssfsi+0x12>
     c4c:	12 c0       	rjmp	.+36     	; 0xc72 <__fixunssfsi+0x46>
     c4e:	b1 30       	cpi	r27, 0x01	; 1
     c50:	81 f0       	breq	.+32     	; 0xc72 <__fixunssfsi+0x46>
     c52:	9f d0       	rcall	.+318    	; 0xd92 <__fp_zero>
     c54:	b1 e0       	ldi	r27, 0x01	; 1
     c56:	08 95       	ret
     c58:	9c c0       	rjmp	.+312    	; 0xd92 <__fp_zero>
     c5a:	67 2f       	mov	r22, r23
     c5c:	78 2f       	mov	r23, r24
     c5e:	88 27       	eor	r24, r24
     c60:	b8 5f       	subi	r27, 0xF8	; 248
     c62:	39 f0       	breq	.+14     	; 0xc72 <__fixunssfsi+0x46>
     c64:	b9 3f       	cpi	r27, 0xF9	; 249
     c66:	cc f3       	brlt	.-14     	; 0xc5a <__fixunssfsi+0x2e>
     c68:	86 95       	lsr	r24
     c6a:	77 95       	ror	r23
     c6c:	67 95       	ror	r22
     c6e:	b3 95       	inc	r27
     c70:	d9 f7       	brne	.-10     	; 0xc68 <__fixunssfsi+0x3c>
     c72:	3e f4       	brtc	.+14     	; 0xc82 <__fixunssfsi+0x56>
     c74:	90 95       	com	r25
     c76:	80 95       	com	r24
     c78:	70 95       	com	r23
     c7a:	61 95       	neg	r22
     c7c:	7f 4f       	sbci	r23, 0xFF	; 255
     c7e:	8f 4f       	sbci	r24, 0xFF	; 255
     c80:	9f 4f       	sbci	r25, 0xFF	; 255
     c82:	08 95       	ret

00000c84 <__floatunsisf>:
     c84:	e8 94       	clt
     c86:	09 c0       	rjmp	.+18     	; 0xc9a <__floatsisf+0x12>

00000c88 <__floatsisf>:
     c88:	97 fb       	bst	r25, 7
     c8a:	3e f4       	brtc	.+14     	; 0xc9a <__floatsisf+0x12>
     c8c:	90 95       	com	r25
     c8e:	80 95       	com	r24
     c90:	70 95       	com	r23
     c92:	61 95       	neg	r22
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	8f 4f       	sbci	r24, 0xFF	; 255
     c98:	9f 4f       	sbci	r25, 0xFF	; 255
     c9a:	99 23       	and	r25, r25
     c9c:	a9 f0       	breq	.+42     	; 0xcc8 <__floatsisf+0x40>
     c9e:	f9 2f       	mov	r31, r25
     ca0:	96 e9       	ldi	r25, 0x96	; 150
     ca2:	bb 27       	eor	r27, r27
     ca4:	93 95       	inc	r25
     ca6:	f6 95       	lsr	r31
     ca8:	87 95       	ror	r24
     caa:	77 95       	ror	r23
     cac:	67 95       	ror	r22
     cae:	b7 95       	ror	r27
     cb0:	f1 11       	cpse	r31, r1
     cb2:	f8 cf       	rjmp	.-16     	; 0xca4 <__floatsisf+0x1c>
     cb4:	fa f4       	brpl	.+62     	; 0xcf4 <__floatsisf+0x6c>
     cb6:	bb 0f       	add	r27, r27
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__floatsisf+0x36>
     cba:	60 ff       	sbrs	r22, 0
     cbc:	1b c0       	rjmp	.+54     	; 0xcf4 <__floatsisf+0x6c>
     cbe:	6f 5f       	subi	r22, 0xFF	; 255
     cc0:	7f 4f       	sbci	r23, 0xFF	; 255
     cc2:	8f 4f       	sbci	r24, 0xFF	; 255
     cc4:	9f 4f       	sbci	r25, 0xFF	; 255
     cc6:	16 c0       	rjmp	.+44     	; 0xcf4 <__floatsisf+0x6c>
     cc8:	88 23       	and	r24, r24
     cca:	11 f0       	breq	.+4      	; 0xcd0 <__floatsisf+0x48>
     ccc:	96 e9       	ldi	r25, 0x96	; 150
     cce:	11 c0       	rjmp	.+34     	; 0xcf2 <__floatsisf+0x6a>
     cd0:	77 23       	and	r23, r23
     cd2:	21 f0       	breq	.+8      	; 0xcdc <__floatsisf+0x54>
     cd4:	9e e8       	ldi	r25, 0x8E	; 142
     cd6:	87 2f       	mov	r24, r23
     cd8:	76 2f       	mov	r23, r22
     cda:	05 c0       	rjmp	.+10     	; 0xce6 <__floatsisf+0x5e>
     cdc:	66 23       	and	r22, r22
     cde:	71 f0       	breq	.+28     	; 0xcfc <__floatsisf+0x74>
     ce0:	96 e8       	ldi	r25, 0x86	; 134
     ce2:	86 2f       	mov	r24, r22
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	2a f0       	brmi	.+10     	; 0xcf4 <__floatsisf+0x6c>
     cea:	9a 95       	dec	r25
     cec:	66 0f       	add	r22, r22
     cee:	77 1f       	adc	r23, r23
     cf0:	88 1f       	adc	r24, r24
     cf2:	da f7       	brpl	.-10     	; 0xcea <__floatsisf+0x62>
     cf4:	88 0f       	add	r24, r24
     cf6:	96 95       	lsr	r25
     cf8:	87 95       	ror	r24
     cfa:	97 f9       	bld	r25, 7
     cfc:	08 95       	ret

00000cfe <__fp_inf>:
     cfe:	97 f9       	bld	r25, 7
     d00:	9f 67       	ori	r25, 0x7F	; 127
     d02:	80 e8       	ldi	r24, 0x80	; 128
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	08 95       	ret

00000d0a <__fp_nan>:
     d0a:	9f ef       	ldi	r25, 0xFF	; 255
     d0c:	80 ec       	ldi	r24, 0xC0	; 192
     d0e:	08 95       	ret

00000d10 <__fp_pscA>:
     d10:	00 24       	eor	r0, r0
     d12:	0a 94       	dec	r0
     d14:	16 16       	cp	r1, r22
     d16:	17 06       	cpc	r1, r23
     d18:	18 06       	cpc	r1, r24
     d1a:	09 06       	cpc	r0, r25
     d1c:	08 95       	ret

00000d1e <__fp_pscB>:
     d1e:	00 24       	eor	r0, r0
     d20:	0a 94       	dec	r0
     d22:	12 16       	cp	r1, r18
     d24:	13 06       	cpc	r1, r19
     d26:	14 06       	cpc	r1, r20
     d28:	05 06       	cpc	r0, r21
     d2a:	08 95       	ret

00000d2c <__fp_round>:
     d2c:	09 2e       	mov	r0, r25
     d2e:	03 94       	inc	r0
     d30:	00 0c       	add	r0, r0
     d32:	11 f4       	brne	.+4      	; 0xd38 <__fp_round+0xc>
     d34:	88 23       	and	r24, r24
     d36:	52 f0       	brmi	.+20     	; 0xd4c <__fp_round+0x20>
     d38:	bb 0f       	add	r27, r27
     d3a:	40 f4       	brcc	.+16     	; 0xd4c <__fp_round+0x20>
     d3c:	bf 2b       	or	r27, r31
     d3e:	11 f4       	brne	.+4      	; 0xd44 <__fp_round+0x18>
     d40:	60 ff       	sbrs	r22, 0
     d42:	04 c0       	rjmp	.+8      	; 0xd4c <__fp_round+0x20>
     d44:	6f 5f       	subi	r22, 0xFF	; 255
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
     d48:	8f 4f       	sbci	r24, 0xFF	; 255
     d4a:	9f 4f       	sbci	r25, 0xFF	; 255
     d4c:	08 95       	ret

00000d4e <__fp_split3>:
     d4e:	57 fd       	sbrc	r21, 7
     d50:	90 58       	subi	r25, 0x80	; 128
     d52:	44 0f       	add	r20, r20
     d54:	55 1f       	adc	r21, r21
     d56:	59 f0       	breq	.+22     	; 0xd6e <__fp_splitA+0x10>
     d58:	5f 3f       	cpi	r21, 0xFF	; 255
     d5a:	71 f0       	breq	.+28     	; 0xd78 <__fp_splitA+0x1a>
     d5c:	47 95       	ror	r20

00000d5e <__fp_splitA>:
     d5e:	88 0f       	add	r24, r24
     d60:	97 fb       	bst	r25, 7
     d62:	99 1f       	adc	r25, r25
     d64:	61 f0       	breq	.+24     	; 0xd7e <__fp_splitA+0x20>
     d66:	9f 3f       	cpi	r25, 0xFF	; 255
     d68:	79 f0       	breq	.+30     	; 0xd88 <__fp_splitA+0x2a>
     d6a:	87 95       	ror	r24
     d6c:	08 95       	ret
     d6e:	12 16       	cp	r1, r18
     d70:	13 06       	cpc	r1, r19
     d72:	14 06       	cpc	r1, r20
     d74:	55 1f       	adc	r21, r21
     d76:	f2 cf       	rjmp	.-28     	; 0xd5c <__fp_split3+0xe>
     d78:	46 95       	lsr	r20
     d7a:	f1 df       	rcall	.-30     	; 0xd5e <__fp_splitA>
     d7c:	08 c0       	rjmp	.+16     	; 0xd8e <__fp_splitA+0x30>
     d7e:	16 16       	cp	r1, r22
     d80:	17 06       	cpc	r1, r23
     d82:	18 06       	cpc	r1, r24
     d84:	99 1f       	adc	r25, r25
     d86:	f1 cf       	rjmp	.-30     	; 0xd6a <__fp_splitA+0xc>
     d88:	86 95       	lsr	r24
     d8a:	71 05       	cpc	r23, r1
     d8c:	61 05       	cpc	r22, r1
     d8e:	08 94       	sec
     d90:	08 95       	ret

00000d92 <__fp_zero>:
     d92:	e8 94       	clt

00000d94 <__fp_szero>:
     d94:	bb 27       	eor	r27, r27
     d96:	66 27       	eor	r22, r22
     d98:	77 27       	eor	r23, r23
     d9a:	cb 01       	movw	r24, r22
     d9c:	97 f9       	bld	r25, 7
     d9e:	08 95       	ret
     da0:	11 f4       	brne	.+4      	; 0xda6 <__fp_szero+0x12>
     da2:	0e f4       	brtc	.+2      	; 0xda6 <__fp_szero+0x12>
     da4:	b2 cf       	rjmp	.-156    	; 0xd0a <__fp_nan>
     da6:	3e c0       	rjmp	.+124    	; 0xe24 <__fp_mpack>

00000da8 <sqrt>:
     da8:	da df       	rcall	.-76     	; 0xd5e <__fp_splitA>
     daa:	d0 f3       	brcs	.-12     	; 0xda0 <__fp_szero+0xc>
     dac:	99 23       	and	r25, r25
     dae:	d9 f3       	breq	.-10     	; 0xda6 <__fp_szero+0x12>
     db0:	ce f3       	brts	.-14     	; 0xda4 <__fp_szero+0x10>
     db2:	9f 57       	subi	r25, 0x7F	; 127
     db4:	55 0b       	sbc	r21, r21
     db6:	87 ff       	sbrs	r24, 7
     db8:	43 d0       	rcall	.+134    	; 0xe40 <__fp_norm2>
     dba:	00 24       	eor	r0, r0
     dbc:	a0 e6       	ldi	r26, 0x60	; 96
     dbe:	40 ea       	ldi	r20, 0xA0	; 160
     dc0:	90 01       	movw	r18, r0
     dc2:	80 58       	subi	r24, 0x80	; 128
     dc4:	56 95       	lsr	r21
     dc6:	97 95       	ror	r25
     dc8:	28 f4       	brcc	.+10     	; 0xdd4 <sqrt+0x2c>
     dca:	80 5c       	subi	r24, 0xC0	; 192
     dcc:	66 0f       	add	r22, r22
     dce:	77 1f       	adc	r23, r23
     dd0:	88 1f       	adc	r24, r24
     dd2:	20 f0       	brcs	.+8      	; 0xddc <sqrt+0x34>
     dd4:	26 17       	cp	r18, r22
     dd6:	37 07       	cpc	r19, r23
     dd8:	48 07       	cpc	r20, r24
     dda:	30 f4       	brcc	.+12     	; 0xde8 <sqrt+0x40>
     ddc:	62 1b       	sub	r22, r18
     dde:	73 0b       	sbc	r23, r19
     de0:	84 0b       	sbc	r24, r20
     de2:	20 29       	or	r18, r0
     de4:	31 29       	or	r19, r1
     de6:	4a 2b       	or	r20, r26
     de8:	a6 95       	lsr	r26
     dea:	17 94       	ror	r1
     dec:	07 94       	ror	r0
     dee:	20 25       	eor	r18, r0
     df0:	31 25       	eor	r19, r1
     df2:	4a 27       	eor	r20, r26
     df4:	58 f7       	brcc	.-42     	; 0xdcc <sqrt+0x24>
     df6:	66 0f       	add	r22, r22
     df8:	77 1f       	adc	r23, r23
     dfa:	88 1f       	adc	r24, r24
     dfc:	20 f0       	brcs	.+8      	; 0xe06 <sqrt+0x5e>
     dfe:	26 17       	cp	r18, r22
     e00:	37 07       	cpc	r19, r23
     e02:	48 07       	cpc	r20, r24
     e04:	30 f4       	brcc	.+12     	; 0xe12 <sqrt+0x6a>
     e06:	62 0b       	sbc	r22, r18
     e08:	73 0b       	sbc	r23, r19
     e0a:	84 0b       	sbc	r24, r20
     e0c:	20 0d       	add	r18, r0
     e0e:	31 1d       	adc	r19, r1
     e10:	41 1d       	adc	r20, r1
     e12:	a0 95       	com	r26
     e14:	81 f7       	brne	.-32     	; 0xdf6 <sqrt+0x4e>
     e16:	b9 01       	movw	r22, r18
     e18:	84 2f       	mov	r24, r20
     e1a:	91 58       	subi	r25, 0x81	; 129
     e1c:	88 0f       	add	r24, r24
     e1e:	96 95       	lsr	r25
     e20:	87 95       	ror	r24
     e22:	08 95       	ret

00000e24 <__fp_mpack>:
     e24:	9f 3f       	cpi	r25, 0xFF	; 255
     e26:	31 f0       	breq	.+12     	; 0xe34 <__fp_mpack_finite+0xc>

00000e28 <__fp_mpack_finite>:
     e28:	91 50       	subi	r25, 0x01	; 1
     e2a:	20 f4       	brcc	.+8      	; 0xe34 <__fp_mpack_finite+0xc>
     e2c:	87 95       	ror	r24
     e2e:	77 95       	ror	r23
     e30:	67 95       	ror	r22
     e32:	b7 95       	ror	r27
     e34:	88 0f       	add	r24, r24
     e36:	91 1d       	adc	r25, r1
     e38:	96 95       	lsr	r25
     e3a:	87 95       	ror	r24
     e3c:	97 f9       	bld	r25, 7
     e3e:	08 95       	ret

00000e40 <__fp_norm2>:
     e40:	91 50       	subi	r25, 0x01	; 1
     e42:	50 40       	sbci	r21, 0x00	; 0
     e44:	66 0f       	add	r22, r22
     e46:	77 1f       	adc	r23, r23
     e48:	88 1f       	adc	r24, r24
     e4a:	d2 f7       	brpl	.-12     	; 0xe40 <__fp_norm2>
     e4c:	08 95       	ret

00000e4e <__divmodsi4>:
     e4e:	05 2e       	mov	r0, r21
     e50:	97 fb       	bst	r25, 7
     e52:	16 f4       	brtc	.+4      	; 0xe58 <__divmodsi4+0xa>
     e54:	00 94       	com	r0
     e56:	0f d0       	rcall	.+30     	; 0xe76 <__negsi2>
     e58:	57 fd       	sbrc	r21, 7
     e5a:	05 d0       	rcall	.+10     	; 0xe66 <__divmodsi4_neg2>
     e5c:	23 d0       	rcall	.+70     	; 0xea4 <__udivmodsi4>
     e5e:	07 fc       	sbrc	r0, 7
     e60:	02 d0       	rcall	.+4      	; 0xe66 <__divmodsi4_neg2>
     e62:	46 f4       	brtc	.+16     	; 0xe74 <__divmodsi4_exit>
     e64:	08 c0       	rjmp	.+16     	; 0xe76 <__negsi2>

00000e66 <__divmodsi4_neg2>:
     e66:	50 95       	com	r21
     e68:	40 95       	com	r20
     e6a:	30 95       	com	r19
     e6c:	21 95       	neg	r18
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
     e70:	4f 4f       	sbci	r20, 0xFF	; 255
     e72:	5f 4f       	sbci	r21, 0xFF	; 255

00000e74 <__divmodsi4_exit>:
     e74:	08 95       	ret

00000e76 <__negsi2>:
     e76:	90 95       	com	r25
     e78:	80 95       	com	r24
     e7a:	70 95       	com	r23
     e7c:	61 95       	neg	r22
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	8f 4f       	sbci	r24, 0xFF	; 255
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
     e84:	08 95       	ret

00000e86 <__umulhisi3>:
     e86:	a2 9f       	mul	r26, r18
     e88:	b0 01       	movw	r22, r0
     e8a:	b3 9f       	mul	r27, r19
     e8c:	c0 01       	movw	r24, r0
     e8e:	a3 9f       	mul	r26, r19
     e90:	70 0d       	add	r23, r0
     e92:	81 1d       	adc	r24, r1
     e94:	11 24       	eor	r1, r1
     e96:	91 1d       	adc	r25, r1
     e98:	b2 9f       	mul	r27, r18
     e9a:	70 0d       	add	r23, r0
     e9c:	81 1d       	adc	r24, r1
     e9e:	11 24       	eor	r1, r1
     ea0:	91 1d       	adc	r25, r1
     ea2:	08 95       	ret

00000ea4 <__udivmodsi4>:
     ea4:	a1 e2       	ldi	r26, 0x21	; 33
     ea6:	1a 2e       	mov	r1, r26
     ea8:	aa 1b       	sub	r26, r26
     eaa:	bb 1b       	sub	r27, r27
     eac:	fd 01       	movw	r30, r26
     eae:	0d c0       	rjmp	.+26     	; 0xeca <__udivmodsi4_ep>

00000eb0 <__udivmodsi4_loop>:
     eb0:	aa 1f       	adc	r26, r26
     eb2:	bb 1f       	adc	r27, r27
     eb4:	ee 1f       	adc	r30, r30
     eb6:	ff 1f       	adc	r31, r31
     eb8:	a2 17       	cp	r26, r18
     eba:	b3 07       	cpc	r27, r19
     ebc:	e4 07       	cpc	r30, r20
     ebe:	f5 07       	cpc	r31, r21
     ec0:	20 f0       	brcs	.+8      	; 0xeca <__udivmodsi4_ep>
     ec2:	a2 1b       	sub	r26, r18
     ec4:	b3 0b       	sbc	r27, r19
     ec6:	e4 0b       	sbc	r30, r20
     ec8:	f5 0b       	sbc	r31, r21

00000eca <__udivmodsi4_ep>:
     eca:	66 1f       	adc	r22, r22
     ecc:	77 1f       	adc	r23, r23
     ece:	88 1f       	adc	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	1a 94       	dec	r1
     ed4:	69 f7       	brne	.-38     	; 0xeb0 <__udivmodsi4_loop>
     ed6:	60 95       	com	r22
     ed8:	70 95       	com	r23
     eda:	80 95       	com	r24
     edc:	90 95       	com	r25
     ede:	9b 01       	movw	r18, r22
     ee0:	ac 01       	movw	r20, r24
     ee2:	bd 01       	movw	r22, r26
     ee4:	cf 01       	movw	r24, r30
     ee6:	08 95       	ret

00000ee8 <do_rand>:
     ee8:	8f 92       	push	r8
     eea:	9f 92       	push	r9
     eec:	af 92       	push	r10
     eee:	bf 92       	push	r11
     ef0:	cf 92       	push	r12
     ef2:	df 92       	push	r13
     ef4:	ef 92       	push	r14
     ef6:	ff 92       	push	r15
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	ec 01       	movw	r28, r24
     efe:	68 81       	ld	r22, Y
     f00:	79 81       	ldd	r23, Y+1	; 0x01
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	9b 81       	ldd	r25, Y+3	; 0x03
     f06:	61 15       	cp	r22, r1
     f08:	71 05       	cpc	r23, r1
     f0a:	81 05       	cpc	r24, r1
     f0c:	91 05       	cpc	r25, r1
     f0e:	21 f4       	brne	.+8      	; 0xf18 <do_rand+0x30>
     f10:	64 e2       	ldi	r22, 0x24	; 36
     f12:	79 ed       	ldi	r23, 0xD9	; 217
     f14:	8b e5       	ldi	r24, 0x5B	; 91
     f16:	97 e0       	ldi	r25, 0x07	; 7
     f18:	2d e1       	ldi	r18, 0x1D	; 29
     f1a:	33 ef       	ldi	r19, 0xF3	; 243
     f1c:	41 e0       	ldi	r20, 0x01	; 1
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	96 df       	rcall	.-212    	; 0xe4e <__divmodsi4>
     f22:	49 01       	movw	r8, r18
     f24:	5a 01       	movw	r10, r20
     f26:	9b 01       	movw	r18, r22
     f28:	ac 01       	movw	r20, r24
     f2a:	a7 ea       	ldi	r26, 0xA7	; 167
     f2c:	b1 e4       	ldi	r27, 0x41	; 65
     f2e:	0c d3       	rcall	.+1560   	; 0x1548 <__muluhisi3>
     f30:	6b 01       	movw	r12, r22
     f32:	7c 01       	movw	r14, r24
     f34:	ac ee       	ldi	r26, 0xEC	; 236
     f36:	b4 ef       	ldi	r27, 0xF4	; 244
     f38:	a5 01       	movw	r20, r10
     f3a:	94 01       	movw	r18, r8
     f3c:	11 d3       	rcall	.+1570   	; 0x1560 <__mulohisi3>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	8c 0d       	add	r24, r12
     f44:	9d 1d       	adc	r25, r13
     f46:	ae 1d       	adc	r26, r14
     f48:	bf 1d       	adc	r27, r15
     f4a:	b7 ff       	sbrs	r27, 7
     f4c:	03 c0       	rjmp	.+6      	; 0xf54 <do_rand+0x6c>
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	a1 09       	sbc	r26, r1
     f52:	b0 48       	sbci	r27, 0x80	; 128
     f54:	88 83       	st	Y, r24
     f56:	99 83       	std	Y+1, r25	; 0x01
     f58:	aa 83       	std	Y+2, r26	; 0x02
     f5a:	bb 83       	std	Y+3, r27	; 0x03
     f5c:	9f 77       	andi	r25, 0x7F	; 127
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	df 90       	pop	r13
     f68:	cf 90       	pop	r12
     f6a:	bf 90       	pop	r11
     f6c:	af 90       	pop	r10
     f6e:	9f 90       	pop	r9
     f70:	8f 90       	pop	r8
     f72:	08 95       	ret

00000f74 <rand_r>:
     f74:	b9 cf       	rjmp	.-142    	; 0xee8 <do_rand>

00000f76 <rand>:
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	b6 cf       	rjmp	.-148    	; 0xee8 <do_rand>

00000f7c <srand>:
     f7c:	a0 e0       	ldi	r26, 0x00	; 0
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     f84:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f88:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     f8c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     f90:	08 95       	ret

00000f92 <sprintf>:
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	2e 97       	sbiw	r28, 0x0e	; 14
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	0d 89       	ldd	r16, Y+21	; 0x15
     fac:	1e 89       	ldd	r17, Y+22	; 0x16
     fae:	86 e0       	ldi	r24, 0x06	; 6
     fb0:	8c 83       	std	Y+4, r24	; 0x04
     fb2:	1a 83       	std	Y+2, r17	; 0x02
     fb4:	09 83       	std	Y+1, r16	; 0x01
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	9f e7       	ldi	r25, 0x7F	; 127
     fba:	9e 83       	std	Y+6, r25	; 0x06
     fbc:	8d 83       	std	Y+5, r24	; 0x05
     fbe:	ae 01       	movw	r20, r28
     fc0:	47 5e       	subi	r20, 0xE7	; 231
     fc2:	5f 4f       	sbci	r21, 0xFF	; 255
     fc4:	6f 89       	ldd	r22, Y+23	; 0x17
     fc6:	78 8d       	ldd	r23, Y+24	; 0x18
     fc8:	ce 01       	movw	r24, r28
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	10 d0       	rcall	.+32     	; 0xfee <vfprintf>
     fce:	ef 81       	ldd	r30, Y+7	; 0x07
     fd0:	f8 85       	ldd	r31, Y+8	; 0x08
     fd2:	e0 0f       	add	r30, r16
     fd4:	f1 1f       	adc	r31, r17
     fd6:	10 82       	st	Z, r1
     fd8:	2e 96       	adiw	r28, 0x0e	; 14
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	08 95       	ret

00000fee <vfprintf>:
     fee:	2f 92       	push	r2
     ff0:	3f 92       	push	r3
     ff2:	4f 92       	push	r4
     ff4:	5f 92       	push	r5
     ff6:	6f 92       	push	r6
     ff8:	7f 92       	push	r7
     ffa:	8f 92       	push	r8
     ffc:	9f 92       	push	r9
     ffe:	af 92       	push	r10
    1000:	bf 92       	push	r11
    1002:	cf 92       	push	r12
    1004:	df 92       	push	r13
    1006:	ef 92       	push	r14
    1008:	ff 92       	push	r15
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	2b 97       	sbiw	r28, 0x0b	; 11
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	6c 01       	movw	r12, r24
    1024:	7b 01       	movw	r14, r22
    1026:	8a 01       	movw	r16, r20
    1028:	fc 01       	movw	r30, r24
    102a:	17 82       	std	Z+7, r1	; 0x07
    102c:	16 82       	std	Z+6, r1	; 0x06
    102e:	83 81       	ldd	r24, Z+3	; 0x03
    1030:	81 ff       	sbrs	r24, 1
    1032:	bf c1       	rjmp	.+894    	; 0x13b2 <__stack+0x2b3>
    1034:	ce 01       	movw	r24, r28
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	3c 01       	movw	r6, r24
    103a:	f6 01       	movw	r30, r12
    103c:	93 81       	ldd	r25, Z+3	; 0x03
    103e:	f7 01       	movw	r30, r14
    1040:	93 fd       	sbrc	r25, 3
    1042:	85 91       	lpm	r24, Z+
    1044:	93 ff       	sbrs	r25, 3
    1046:	81 91       	ld	r24, Z+
    1048:	7f 01       	movw	r14, r30
    104a:	88 23       	and	r24, r24
    104c:	09 f4       	brne	.+2      	; 0x1050 <__DATA_REGION_LENGTH__+0x50>
    104e:	ad c1       	rjmp	.+858    	; 0x13aa <__stack+0x2ab>
    1050:	85 32       	cpi	r24, 0x25	; 37
    1052:	39 f4       	brne	.+14     	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
    1054:	93 fd       	sbrc	r25, 3
    1056:	85 91       	lpm	r24, Z+
    1058:	93 ff       	sbrs	r25, 3
    105a:	81 91       	ld	r24, Z+
    105c:	7f 01       	movw	r14, r30
    105e:	85 32       	cpi	r24, 0x25	; 37
    1060:	21 f4       	brne	.+8      	; 0x106a <__DATA_REGION_LENGTH__+0x6a>
    1062:	b6 01       	movw	r22, r12
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	d6 d1       	rcall	.+940    	; 0x1414 <fputc>
    1068:	e8 cf       	rjmp	.-48     	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
    106a:	91 2c       	mov	r9, r1
    106c:	21 2c       	mov	r2, r1
    106e:	31 2c       	mov	r3, r1
    1070:	ff e1       	ldi	r31, 0x1F	; 31
    1072:	f3 15       	cp	r31, r3
    1074:	d8 f0       	brcs	.+54     	; 0x10ac <__DATA_REGION_LENGTH__+0xac>
    1076:	8b 32       	cpi	r24, 0x2B	; 43
    1078:	79 f0       	breq	.+30     	; 0x1098 <__DATA_REGION_LENGTH__+0x98>
    107a:	38 f4       	brcc	.+14     	; 0x108a <__DATA_REGION_LENGTH__+0x8a>
    107c:	80 32       	cpi	r24, 0x20	; 32
    107e:	79 f0       	breq	.+30     	; 0x109e <__DATA_REGION_LENGTH__+0x9e>
    1080:	83 32       	cpi	r24, 0x23	; 35
    1082:	a1 f4       	brne	.+40     	; 0x10ac <__DATA_REGION_LENGTH__+0xac>
    1084:	23 2d       	mov	r18, r3
    1086:	20 61       	ori	r18, 0x10	; 16
    1088:	1d c0       	rjmp	.+58     	; 0x10c4 <__DATA_REGION_LENGTH__+0xc4>
    108a:	8d 32       	cpi	r24, 0x2D	; 45
    108c:	61 f0       	breq	.+24     	; 0x10a6 <__DATA_REGION_LENGTH__+0xa6>
    108e:	80 33       	cpi	r24, 0x30	; 48
    1090:	69 f4       	brne	.+26     	; 0x10ac <__DATA_REGION_LENGTH__+0xac>
    1092:	23 2d       	mov	r18, r3
    1094:	21 60       	ori	r18, 0x01	; 1
    1096:	16 c0       	rjmp	.+44     	; 0x10c4 <__DATA_REGION_LENGTH__+0xc4>
    1098:	83 2d       	mov	r24, r3
    109a:	82 60       	ori	r24, 0x02	; 2
    109c:	38 2e       	mov	r3, r24
    109e:	e3 2d       	mov	r30, r3
    10a0:	e4 60       	ori	r30, 0x04	; 4
    10a2:	3e 2e       	mov	r3, r30
    10a4:	2a c0       	rjmp	.+84     	; 0x10fa <__DATA_REGION_LENGTH__+0xfa>
    10a6:	f3 2d       	mov	r31, r3
    10a8:	f8 60       	ori	r31, 0x08	; 8
    10aa:	1d c0       	rjmp	.+58     	; 0x10e6 <__DATA_REGION_LENGTH__+0xe6>
    10ac:	37 fc       	sbrc	r3, 7
    10ae:	2d c0       	rjmp	.+90     	; 0x110a <__stack+0xb>
    10b0:	20 ed       	ldi	r18, 0xD0	; 208
    10b2:	28 0f       	add	r18, r24
    10b4:	2a 30       	cpi	r18, 0x0A	; 10
    10b6:	40 f0       	brcs	.+16     	; 0x10c8 <__DATA_REGION_LENGTH__+0xc8>
    10b8:	8e 32       	cpi	r24, 0x2E	; 46
    10ba:	b9 f4       	brne	.+46     	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
    10bc:	36 fc       	sbrc	r3, 6
    10be:	75 c1       	rjmp	.+746    	; 0x13aa <__stack+0x2ab>
    10c0:	23 2d       	mov	r18, r3
    10c2:	20 64       	ori	r18, 0x40	; 64
    10c4:	32 2e       	mov	r3, r18
    10c6:	19 c0       	rjmp	.+50     	; 0x10fa <__DATA_REGION_LENGTH__+0xfa>
    10c8:	36 fe       	sbrs	r3, 6
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <__DATA_REGION_LENGTH__+0xd8>
    10cc:	8a e0       	ldi	r24, 0x0A	; 10
    10ce:	98 9e       	mul	r9, r24
    10d0:	20 0d       	add	r18, r0
    10d2:	11 24       	eor	r1, r1
    10d4:	92 2e       	mov	r9, r18
    10d6:	11 c0       	rjmp	.+34     	; 0x10fa <__DATA_REGION_LENGTH__+0xfa>
    10d8:	ea e0       	ldi	r30, 0x0A	; 10
    10da:	2e 9e       	mul	r2, r30
    10dc:	20 0d       	add	r18, r0
    10de:	11 24       	eor	r1, r1
    10e0:	22 2e       	mov	r2, r18
    10e2:	f3 2d       	mov	r31, r3
    10e4:	f0 62       	ori	r31, 0x20	; 32
    10e6:	3f 2e       	mov	r3, r31
    10e8:	08 c0       	rjmp	.+16     	; 0x10fa <__DATA_REGION_LENGTH__+0xfa>
    10ea:	8c 36       	cpi	r24, 0x6C	; 108
    10ec:	21 f4       	brne	.+8      	; 0x10f6 <__DATA_REGION_LENGTH__+0xf6>
    10ee:	83 2d       	mov	r24, r3
    10f0:	80 68       	ori	r24, 0x80	; 128
    10f2:	38 2e       	mov	r3, r24
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <__DATA_REGION_LENGTH__+0xfa>
    10f6:	88 36       	cpi	r24, 0x68	; 104
    10f8:	41 f4       	brne	.+16     	; 0x110a <__stack+0xb>
    10fa:	f7 01       	movw	r30, r14
    10fc:	93 fd       	sbrc	r25, 3
    10fe:	85 91       	lpm	r24, Z+
    1100:	93 ff       	sbrs	r25, 3
    1102:	81 91       	ld	r24, Z+
    1104:	7f 01       	movw	r14, r30
    1106:	81 11       	cpse	r24, r1
    1108:	b3 cf       	rjmp	.-154    	; 0x1070 <__DATA_REGION_LENGTH__+0x70>
    110a:	98 2f       	mov	r25, r24
    110c:	9f 7d       	andi	r25, 0xDF	; 223
    110e:	95 54       	subi	r25, 0x45	; 69
    1110:	93 30       	cpi	r25, 0x03	; 3
    1112:	28 f4       	brcc	.+10     	; 0x111e <__stack+0x1f>
    1114:	0c 5f       	subi	r16, 0xFC	; 252
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	9f e3       	ldi	r25, 0x3F	; 63
    111a:	99 83       	std	Y+1, r25	; 0x01
    111c:	0d c0       	rjmp	.+26     	; 0x1138 <__stack+0x39>
    111e:	83 36       	cpi	r24, 0x63	; 99
    1120:	31 f0       	breq	.+12     	; 0x112e <__stack+0x2f>
    1122:	83 37       	cpi	r24, 0x73	; 115
    1124:	71 f0       	breq	.+28     	; 0x1142 <__stack+0x43>
    1126:	83 35       	cpi	r24, 0x53	; 83
    1128:	09 f0       	breq	.+2      	; 0x112c <__stack+0x2d>
    112a:	55 c0       	rjmp	.+170    	; 0x11d6 <__stack+0xd7>
    112c:	20 c0       	rjmp	.+64     	; 0x116e <__stack+0x6f>
    112e:	f8 01       	movw	r30, r16
    1130:	80 81       	ld	r24, Z
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	0e 5f       	subi	r16, 0xFE	; 254
    1136:	1f 4f       	sbci	r17, 0xFF	; 255
    1138:	88 24       	eor	r8, r8
    113a:	83 94       	inc	r8
    113c:	91 2c       	mov	r9, r1
    113e:	53 01       	movw	r10, r6
    1140:	12 c0       	rjmp	.+36     	; 0x1166 <__stack+0x67>
    1142:	28 01       	movw	r4, r16
    1144:	f2 e0       	ldi	r31, 0x02	; 2
    1146:	4f 0e       	add	r4, r31
    1148:	51 1c       	adc	r5, r1
    114a:	f8 01       	movw	r30, r16
    114c:	a0 80       	ld	r10, Z
    114e:	b1 80       	ldd	r11, Z+1	; 0x01
    1150:	36 fe       	sbrs	r3, 6
    1152:	03 c0       	rjmp	.+6      	; 0x115a <__stack+0x5b>
    1154:	69 2d       	mov	r22, r9
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	02 c0       	rjmp	.+4      	; 0x115e <__stack+0x5f>
    115a:	6f ef       	ldi	r22, 0xFF	; 255
    115c:	7f ef       	ldi	r23, 0xFF	; 255
    115e:	c5 01       	movw	r24, r10
    1160:	4e d1       	rcall	.+668    	; 0x13fe <strnlen>
    1162:	4c 01       	movw	r8, r24
    1164:	82 01       	movw	r16, r4
    1166:	f3 2d       	mov	r31, r3
    1168:	ff 77       	andi	r31, 0x7F	; 127
    116a:	3f 2e       	mov	r3, r31
    116c:	15 c0       	rjmp	.+42     	; 0x1198 <__stack+0x99>
    116e:	28 01       	movw	r4, r16
    1170:	22 e0       	ldi	r18, 0x02	; 2
    1172:	42 0e       	add	r4, r18
    1174:	51 1c       	adc	r5, r1
    1176:	f8 01       	movw	r30, r16
    1178:	a0 80       	ld	r10, Z
    117a:	b1 80       	ldd	r11, Z+1	; 0x01
    117c:	36 fe       	sbrs	r3, 6
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <__stack+0x87>
    1180:	69 2d       	mov	r22, r9
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	02 c0       	rjmp	.+4      	; 0x118a <__stack+0x8b>
    1186:	6f ef       	ldi	r22, 0xFF	; 255
    1188:	7f ef       	ldi	r23, 0xFF	; 255
    118a:	c5 01       	movw	r24, r10
    118c:	2d d1       	rcall	.+602    	; 0x13e8 <strnlen_P>
    118e:	4c 01       	movw	r8, r24
    1190:	f3 2d       	mov	r31, r3
    1192:	f0 68       	ori	r31, 0x80	; 128
    1194:	3f 2e       	mov	r3, r31
    1196:	82 01       	movw	r16, r4
    1198:	33 fc       	sbrc	r3, 3
    119a:	19 c0       	rjmp	.+50     	; 0x11ce <__stack+0xcf>
    119c:	82 2d       	mov	r24, r2
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	88 16       	cp	r8, r24
    11a2:	99 06       	cpc	r9, r25
    11a4:	a0 f4       	brcc	.+40     	; 0x11ce <__stack+0xcf>
    11a6:	b6 01       	movw	r22, r12
    11a8:	80 e2       	ldi	r24, 0x20	; 32
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	33 d1       	rcall	.+614    	; 0x1414 <fputc>
    11ae:	2a 94       	dec	r2
    11b0:	f5 cf       	rjmp	.-22     	; 0x119c <__stack+0x9d>
    11b2:	f5 01       	movw	r30, r10
    11b4:	37 fc       	sbrc	r3, 7
    11b6:	85 91       	lpm	r24, Z+
    11b8:	37 fe       	sbrs	r3, 7
    11ba:	81 91       	ld	r24, Z+
    11bc:	5f 01       	movw	r10, r30
    11be:	b6 01       	movw	r22, r12
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	28 d1       	rcall	.+592    	; 0x1414 <fputc>
    11c4:	21 10       	cpse	r2, r1
    11c6:	2a 94       	dec	r2
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	82 1a       	sub	r8, r18
    11cc:	91 08       	sbc	r9, r1
    11ce:	81 14       	cp	r8, r1
    11d0:	91 04       	cpc	r9, r1
    11d2:	79 f7       	brne	.-34     	; 0x11b2 <__stack+0xb3>
    11d4:	e1 c0       	rjmp	.+450    	; 0x1398 <__stack+0x299>
    11d6:	84 36       	cpi	r24, 0x64	; 100
    11d8:	11 f0       	breq	.+4      	; 0x11de <__stack+0xdf>
    11da:	89 36       	cpi	r24, 0x69	; 105
    11dc:	39 f5       	brne	.+78     	; 0x122c <__stack+0x12d>
    11de:	f8 01       	movw	r30, r16
    11e0:	37 fe       	sbrs	r3, 7
    11e2:	07 c0       	rjmp	.+14     	; 0x11f2 <__stack+0xf3>
    11e4:	60 81       	ld	r22, Z
    11e6:	71 81       	ldd	r23, Z+1	; 0x01
    11e8:	82 81       	ldd	r24, Z+2	; 0x02
    11ea:	93 81       	ldd	r25, Z+3	; 0x03
    11ec:	0c 5f       	subi	r16, 0xFC	; 252
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
    11f0:	08 c0       	rjmp	.+16     	; 0x1202 <__stack+0x103>
    11f2:	60 81       	ld	r22, Z
    11f4:	71 81       	ldd	r23, Z+1	; 0x01
    11f6:	07 2e       	mov	r0, r23
    11f8:	00 0c       	add	r0, r0
    11fa:	88 0b       	sbc	r24, r24
    11fc:	99 0b       	sbc	r25, r25
    11fe:	0e 5f       	subi	r16, 0xFE	; 254
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
    1202:	f3 2d       	mov	r31, r3
    1204:	ff 76       	andi	r31, 0x6F	; 111
    1206:	3f 2e       	mov	r3, r31
    1208:	97 ff       	sbrs	r25, 7
    120a:	09 c0       	rjmp	.+18     	; 0x121e <__stack+0x11f>
    120c:	90 95       	com	r25
    120e:	80 95       	com	r24
    1210:	70 95       	com	r23
    1212:	61 95       	neg	r22
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	8f 4f       	sbci	r24, 0xFF	; 255
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	f0 68       	ori	r31, 0x80	; 128
    121c:	3f 2e       	mov	r3, r31
    121e:	2a e0       	ldi	r18, 0x0A	; 10
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	a3 01       	movw	r20, r6
    1224:	33 d1       	rcall	.+614    	; 0x148c <__ultoa_invert>
    1226:	88 2e       	mov	r8, r24
    1228:	86 18       	sub	r8, r6
    122a:	44 c0       	rjmp	.+136    	; 0x12b4 <__stack+0x1b5>
    122c:	85 37       	cpi	r24, 0x75	; 117
    122e:	31 f4       	brne	.+12     	; 0x123c <__stack+0x13d>
    1230:	23 2d       	mov	r18, r3
    1232:	2f 7e       	andi	r18, 0xEF	; 239
    1234:	b2 2e       	mov	r11, r18
    1236:	2a e0       	ldi	r18, 0x0A	; 10
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	25 c0       	rjmp	.+74     	; 0x1286 <__stack+0x187>
    123c:	93 2d       	mov	r25, r3
    123e:	99 7f       	andi	r25, 0xF9	; 249
    1240:	b9 2e       	mov	r11, r25
    1242:	8f 36       	cpi	r24, 0x6F	; 111
    1244:	c1 f0       	breq	.+48     	; 0x1276 <__stack+0x177>
    1246:	18 f4       	brcc	.+6      	; 0x124e <__stack+0x14f>
    1248:	88 35       	cpi	r24, 0x58	; 88
    124a:	79 f0       	breq	.+30     	; 0x126a <__stack+0x16b>
    124c:	ae c0       	rjmp	.+348    	; 0x13aa <__stack+0x2ab>
    124e:	80 37       	cpi	r24, 0x70	; 112
    1250:	19 f0       	breq	.+6      	; 0x1258 <__stack+0x159>
    1252:	88 37       	cpi	r24, 0x78	; 120
    1254:	21 f0       	breq	.+8      	; 0x125e <__stack+0x15f>
    1256:	a9 c0       	rjmp	.+338    	; 0x13aa <__stack+0x2ab>
    1258:	e9 2f       	mov	r30, r25
    125a:	e0 61       	ori	r30, 0x10	; 16
    125c:	be 2e       	mov	r11, r30
    125e:	b4 fe       	sbrs	r11, 4
    1260:	0d c0       	rjmp	.+26     	; 0x127c <__stack+0x17d>
    1262:	fb 2d       	mov	r31, r11
    1264:	f4 60       	ori	r31, 0x04	; 4
    1266:	bf 2e       	mov	r11, r31
    1268:	09 c0       	rjmp	.+18     	; 0x127c <__stack+0x17d>
    126a:	34 fe       	sbrs	r3, 4
    126c:	0a c0       	rjmp	.+20     	; 0x1282 <__stack+0x183>
    126e:	29 2f       	mov	r18, r25
    1270:	26 60       	ori	r18, 0x06	; 6
    1272:	b2 2e       	mov	r11, r18
    1274:	06 c0       	rjmp	.+12     	; 0x1282 <__stack+0x183>
    1276:	28 e0       	ldi	r18, 0x08	; 8
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	05 c0       	rjmp	.+10     	; 0x1286 <__stack+0x187>
    127c:	20 e1       	ldi	r18, 0x10	; 16
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <__stack+0x187>
    1282:	20 e1       	ldi	r18, 0x10	; 16
    1284:	32 e0       	ldi	r19, 0x02	; 2
    1286:	f8 01       	movw	r30, r16
    1288:	b7 fe       	sbrs	r11, 7
    128a:	07 c0       	rjmp	.+14     	; 0x129a <__stack+0x19b>
    128c:	60 81       	ld	r22, Z
    128e:	71 81       	ldd	r23, Z+1	; 0x01
    1290:	82 81       	ldd	r24, Z+2	; 0x02
    1292:	93 81       	ldd	r25, Z+3	; 0x03
    1294:	0c 5f       	subi	r16, 0xFC	; 252
    1296:	1f 4f       	sbci	r17, 0xFF	; 255
    1298:	06 c0       	rjmp	.+12     	; 0x12a6 <__stack+0x1a7>
    129a:	60 81       	ld	r22, Z
    129c:	71 81       	ldd	r23, Z+1	; 0x01
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 5f       	subi	r16, 0xFE	; 254
    12a4:	1f 4f       	sbci	r17, 0xFF	; 255
    12a6:	a3 01       	movw	r20, r6
    12a8:	f1 d0       	rcall	.+482    	; 0x148c <__ultoa_invert>
    12aa:	88 2e       	mov	r8, r24
    12ac:	86 18       	sub	r8, r6
    12ae:	fb 2d       	mov	r31, r11
    12b0:	ff 77       	andi	r31, 0x7F	; 127
    12b2:	3f 2e       	mov	r3, r31
    12b4:	36 fe       	sbrs	r3, 6
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <__stack+0x1d3>
    12b8:	23 2d       	mov	r18, r3
    12ba:	2e 7f       	andi	r18, 0xFE	; 254
    12bc:	a2 2e       	mov	r10, r18
    12be:	89 14       	cp	r8, r9
    12c0:	58 f4       	brcc	.+22     	; 0x12d8 <__stack+0x1d9>
    12c2:	34 fe       	sbrs	r3, 4
    12c4:	0b c0       	rjmp	.+22     	; 0x12dc <__stack+0x1dd>
    12c6:	32 fc       	sbrc	r3, 2
    12c8:	09 c0       	rjmp	.+18     	; 0x12dc <__stack+0x1dd>
    12ca:	83 2d       	mov	r24, r3
    12cc:	8e 7e       	andi	r24, 0xEE	; 238
    12ce:	a8 2e       	mov	r10, r24
    12d0:	05 c0       	rjmp	.+10     	; 0x12dc <__stack+0x1dd>
    12d2:	b8 2c       	mov	r11, r8
    12d4:	a3 2c       	mov	r10, r3
    12d6:	03 c0       	rjmp	.+6      	; 0x12de <__stack+0x1df>
    12d8:	b8 2c       	mov	r11, r8
    12da:	01 c0       	rjmp	.+2      	; 0x12de <__stack+0x1df>
    12dc:	b9 2c       	mov	r11, r9
    12de:	a4 fe       	sbrs	r10, 4
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <__stack+0x201>
    12e2:	fe 01       	movw	r30, r28
    12e4:	e8 0d       	add	r30, r8
    12e6:	f1 1d       	adc	r31, r1
    12e8:	80 81       	ld	r24, Z
    12ea:	80 33       	cpi	r24, 0x30	; 48
    12ec:	21 f4       	brne	.+8      	; 0x12f6 <__stack+0x1f7>
    12ee:	9a 2d       	mov	r25, r10
    12f0:	99 7e       	andi	r25, 0xE9	; 233
    12f2:	a9 2e       	mov	r10, r25
    12f4:	09 c0       	rjmp	.+18     	; 0x1308 <__stack+0x209>
    12f6:	a2 fe       	sbrs	r10, 2
    12f8:	06 c0       	rjmp	.+12     	; 0x1306 <__stack+0x207>
    12fa:	b3 94       	inc	r11
    12fc:	b3 94       	inc	r11
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <__stack+0x209>
    1300:	8a 2d       	mov	r24, r10
    1302:	86 78       	andi	r24, 0x86	; 134
    1304:	09 f0       	breq	.+2      	; 0x1308 <__stack+0x209>
    1306:	b3 94       	inc	r11
    1308:	a3 fc       	sbrc	r10, 3
    130a:	10 c0       	rjmp	.+32     	; 0x132c <__stack+0x22d>
    130c:	a0 fe       	sbrs	r10, 0
    130e:	06 c0       	rjmp	.+12     	; 0x131c <__stack+0x21d>
    1310:	b2 14       	cp	r11, r2
    1312:	80 f4       	brcc	.+32     	; 0x1334 <__stack+0x235>
    1314:	28 0c       	add	r2, r8
    1316:	92 2c       	mov	r9, r2
    1318:	9b 18       	sub	r9, r11
    131a:	0d c0       	rjmp	.+26     	; 0x1336 <__stack+0x237>
    131c:	b2 14       	cp	r11, r2
    131e:	58 f4       	brcc	.+22     	; 0x1336 <__stack+0x237>
    1320:	b6 01       	movw	r22, r12
    1322:	80 e2       	ldi	r24, 0x20	; 32
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	76 d0       	rcall	.+236    	; 0x1414 <fputc>
    1328:	b3 94       	inc	r11
    132a:	f8 cf       	rjmp	.-16     	; 0x131c <__stack+0x21d>
    132c:	b2 14       	cp	r11, r2
    132e:	18 f4       	brcc	.+6      	; 0x1336 <__stack+0x237>
    1330:	2b 18       	sub	r2, r11
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <__stack+0x239>
    1334:	98 2c       	mov	r9, r8
    1336:	21 2c       	mov	r2, r1
    1338:	a4 fe       	sbrs	r10, 4
    133a:	0f c0       	rjmp	.+30     	; 0x135a <__stack+0x25b>
    133c:	b6 01       	movw	r22, r12
    133e:	80 e3       	ldi	r24, 0x30	; 48
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	68 d0       	rcall	.+208    	; 0x1414 <fputc>
    1344:	a2 fe       	sbrs	r10, 2
    1346:	16 c0       	rjmp	.+44     	; 0x1374 <__stack+0x275>
    1348:	a1 fc       	sbrc	r10, 1
    134a:	03 c0       	rjmp	.+6      	; 0x1352 <__stack+0x253>
    134c:	88 e7       	ldi	r24, 0x78	; 120
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <__stack+0x257>
    1352:	88 e5       	ldi	r24, 0x58	; 88
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	b6 01       	movw	r22, r12
    1358:	0c c0       	rjmp	.+24     	; 0x1372 <__stack+0x273>
    135a:	8a 2d       	mov	r24, r10
    135c:	86 78       	andi	r24, 0x86	; 134
    135e:	51 f0       	breq	.+20     	; 0x1374 <__stack+0x275>
    1360:	a1 fe       	sbrs	r10, 1
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <__stack+0x269>
    1364:	8b e2       	ldi	r24, 0x2B	; 43
    1366:	01 c0       	rjmp	.+2      	; 0x136a <__stack+0x26b>
    1368:	80 e2       	ldi	r24, 0x20	; 32
    136a:	a7 fc       	sbrc	r10, 7
    136c:	8d e2       	ldi	r24, 0x2D	; 45
    136e:	b6 01       	movw	r22, r12
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	50 d0       	rcall	.+160    	; 0x1414 <fputc>
    1374:	89 14       	cp	r8, r9
    1376:	30 f4       	brcc	.+12     	; 0x1384 <__stack+0x285>
    1378:	b6 01       	movw	r22, r12
    137a:	80 e3       	ldi	r24, 0x30	; 48
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	4a d0       	rcall	.+148    	; 0x1414 <fputc>
    1380:	9a 94       	dec	r9
    1382:	f8 cf       	rjmp	.-16     	; 0x1374 <__stack+0x275>
    1384:	8a 94       	dec	r8
    1386:	f3 01       	movw	r30, r6
    1388:	e8 0d       	add	r30, r8
    138a:	f1 1d       	adc	r31, r1
    138c:	80 81       	ld	r24, Z
    138e:	b6 01       	movw	r22, r12
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	40 d0       	rcall	.+128    	; 0x1414 <fputc>
    1394:	81 10       	cpse	r8, r1
    1396:	f6 cf       	rjmp	.-20     	; 0x1384 <__stack+0x285>
    1398:	22 20       	and	r2, r2
    139a:	09 f4       	brne	.+2      	; 0x139e <__stack+0x29f>
    139c:	4e ce       	rjmp	.-868    	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
    139e:	b6 01       	movw	r22, r12
    13a0:	80 e2       	ldi	r24, 0x20	; 32
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	37 d0       	rcall	.+110    	; 0x1414 <fputc>
    13a6:	2a 94       	dec	r2
    13a8:	f7 cf       	rjmp	.-18     	; 0x1398 <__stack+0x299>
    13aa:	f6 01       	movw	r30, r12
    13ac:	86 81       	ldd	r24, Z+6	; 0x06
    13ae:	97 81       	ldd	r25, Z+7	; 0x07
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <__stack+0x2b7>
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
    13b4:	9f ef       	ldi	r25, 0xFF	; 255
    13b6:	2b 96       	adiw	r28, 0x0b	; 11
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	df 90       	pop	r13
    13d0:	cf 90       	pop	r12
    13d2:	bf 90       	pop	r11
    13d4:	af 90       	pop	r10
    13d6:	9f 90       	pop	r9
    13d8:	8f 90       	pop	r8
    13da:	7f 90       	pop	r7
    13dc:	6f 90       	pop	r6
    13de:	5f 90       	pop	r5
    13e0:	4f 90       	pop	r4
    13e2:	3f 90       	pop	r3
    13e4:	2f 90       	pop	r2
    13e6:	08 95       	ret

000013e8 <strnlen_P>:
    13e8:	fc 01       	movw	r30, r24
    13ea:	05 90       	lpm	r0, Z+
    13ec:	61 50       	subi	r22, 0x01	; 1
    13ee:	70 40       	sbci	r23, 0x00	; 0
    13f0:	01 10       	cpse	r0, r1
    13f2:	d8 f7       	brcc	.-10     	; 0x13ea <strnlen_P+0x2>
    13f4:	80 95       	com	r24
    13f6:	90 95       	com	r25
    13f8:	8e 0f       	add	r24, r30
    13fa:	9f 1f       	adc	r25, r31
    13fc:	08 95       	ret

000013fe <strnlen>:
    13fe:	fc 01       	movw	r30, r24
    1400:	61 50       	subi	r22, 0x01	; 1
    1402:	70 40       	sbci	r23, 0x00	; 0
    1404:	01 90       	ld	r0, Z+
    1406:	01 10       	cpse	r0, r1
    1408:	d8 f7       	brcc	.-10     	; 0x1400 <strnlen+0x2>
    140a:	80 95       	com	r24
    140c:	90 95       	com	r25
    140e:	8e 0f       	add	r24, r30
    1410:	9f 1f       	adc	r25, r31
    1412:	08 95       	ret

00001414 <fputc>:
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	fb 01       	movw	r30, r22
    141e:	23 81       	ldd	r18, Z+3	; 0x03
    1420:	21 fd       	sbrc	r18, 1
    1422:	03 c0       	rjmp	.+6      	; 0x142a <fputc+0x16>
    1424:	8f ef       	ldi	r24, 0xFF	; 255
    1426:	9f ef       	ldi	r25, 0xFF	; 255
    1428:	2c c0       	rjmp	.+88     	; 0x1482 <fputc+0x6e>
    142a:	22 ff       	sbrs	r18, 2
    142c:	16 c0       	rjmp	.+44     	; 0x145a <fputc+0x46>
    142e:	46 81       	ldd	r20, Z+6	; 0x06
    1430:	57 81       	ldd	r21, Z+7	; 0x07
    1432:	24 81       	ldd	r18, Z+4	; 0x04
    1434:	35 81       	ldd	r19, Z+5	; 0x05
    1436:	42 17       	cp	r20, r18
    1438:	53 07       	cpc	r21, r19
    143a:	44 f4       	brge	.+16     	; 0x144c <fputc+0x38>
    143c:	a0 81       	ld	r26, Z
    143e:	b1 81       	ldd	r27, Z+1	; 0x01
    1440:	9d 01       	movw	r18, r26
    1442:	2f 5f       	subi	r18, 0xFF	; 255
    1444:	3f 4f       	sbci	r19, 0xFF	; 255
    1446:	31 83       	std	Z+1, r19	; 0x01
    1448:	20 83       	st	Z, r18
    144a:	8c 93       	st	X, r24
    144c:	26 81       	ldd	r18, Z+6	; 0x06
    144e:	37 81       	ldd	r19, Z+7	; 0x07
    1450:	2f 5f       	subi	r18, 0xFF	; 255
    1452:	3f 4f       	sbci	r19, 0xFF	; 255
    1454:	37 83       	std	Z+7, r19	; 0x07
    1456:	26 83       	std	Z+6, r18	; 0x06
    1458:	14 c0       	rjmp	.+40     	; 0x1482 <fputc+0x6e>
    145a:	8b 01       	movw	r16, r22
    145c:	ec 01       	movw	r28, r24
    145e:	fb 01       	movw	r30, r22
    1460:	00 84       	ldd	r0, Z+8	; 0x08
    1462:	f1 85       	ldd	r31, Z+9	; 0x09
    1464:	e0 2d       	mov	r30, r0
    1466:	09 95       	icall
    1468:	89 2b       	or	r24, r25
    146a:	e1 f6       	brne	.-72     	; 0x1424 <fputc+0x10>
    146c:	d8 01       	movw	r26, r16
    146e:	16 96       	adiw	r26, 0x06	; 6
    1470:	8d 91       	ld	r24, X+
    1472:	9c 91       	ld	r25, X
    1474:	17 97       	sbiw	r26, 0x07	; 7
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	17 96       	adiw	r26, 0x07	; 7
    147a:	9c 93       	st	X, r25
    147c:	8e 93       	st	-X, r24
    147e:	16 97       	sbiw	r26, 0x06	; 6
    1480:	ce 01       	movw	r24, r28
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	1f 91       	pop	r17
    1488:	0f 91       	pop	r16
    148a:	08 95       	ret

0000148c <__ultoa_invert>:
    148c:	fa 01       	movw	r30, r20
    148e:	aa 27       	eor	r26, r26
    1490:	28 30       	cpi	r18, 0x08	; 8
    1492:	51 f1       	breq	.+84     	; 0x14e8 <__ultoa_invert+0x5c>
    1494:	20 31       	cpi	r18, 0x10	; 16
    1496:	81 f1       	breq	.+96     	; 0x14f8 <__ultoa_invert+0x6c>
    1498:	e8 94       	clt
    149a:	6f 93       	push	r22
    149c:	6e 7f       	andi	r22, 0xFE	; 254
    149e:	6e 5f       	subi	r22, 0xFE	; 254
    14a0:	7f 4f       	sbci	r23, 0xFF	; 255
    14a2:	8f 4f       	sbci	r24, 0xFF	; 255
    14a4:	9f 4f       	sbci	r25, 0xFF	; 255
    14a6:	af 4f       	sbci	r26, 0xFF	; 255
    14a8:	b1 e0       	ldi	r27, 0x01	; 1
    14aa:	3e d0       	rcall	.+124    	; 0x1528 <__ultoa_invert+0x9c>
    14ac:	b4 e0       	ldi	r27, 0x04	; 4
    14ae:	3c d0       	rcall	.+120    	; 0x1528 <__ultoa_invert+0x9c>
    14b0:	67 0f       	add	r22, r23
    14b2:	78 1f       	adc	r23, r24
    14b4:	89 1f       	adc	r24, r25
    14b6:	9a 1f       	adc	r25, r26
    14b8:	a1 1d       	adc	r26, r1
    14ba:	68 0f       	add	r22, r24
    14bc:	79 1f       	adc	r23, r25
    14be:	8a 1f       	adc	r24, r26
    14c0:	91 1d       	adc	r25, r1
    14c2:	a1 1d       	adc	r26, r1
    14c4:	6a 0f       	add	r22, r26
    14c6:	71 1d       	adc	r23, r1
    14c8:	81 1d       	adc	r24, r1
    14ca:	91 1d       	adc	r25, r1
    14cc:	a1 1d       	adc	r26, r1
    14ce:	20 d0       	rcall	.+64     	; 0x1510 <__ultoa_invert+0x84>
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <__ultoa_invert+0x48>
    14d2:	68 94       	set
    14d4:	3f 91       	pop	r19
    14d6:	2a e0       	ldi	r18, 0x0A	; 10
    14d8:	26 9f       	mul	r18, r22
    14da:	11 24       	eor	r1, r1
    14dc:	30 19       	sub	r19, r0
    14de:	30 5d       	subi	r19, 0xD0	; 208
    14e0:	31 93       	st	Z+, r19
    14e2:	de f6       	brtc	.-74     	; 0x149a <__ultoa_invert+0xe>
    14e4:	cf 01       	movw	r24, r30
    14e6:	08 95       	ret
    14e8:	46 2f       	mov	r20, r22
    14ea:	47 70       	andi	r20, 0x07	; 7
    14ec:	40 5d       	subi	r20, 0xD0	; 208
    14ee:	41 93       	st	Z+, r20
    14f0:	b3 e0       	ldi	r27, 0x03	; 3
    14f2:	0f d0       	rcall	.+30     	; 0x1512 <__ultoa_invert+0x86>
    14f4:	c9 f7       	brne	.-14     	; 0x14e8 <__ultoa_invert+0x5c>
    14f6:	f6 cf       	rjmp	.-20     	; 0x14e4 <__ultoa_invert+0x58>
    14f8:	46 2f       	mov	r20, r22
    14fa:	4f 70       	andi	r20, 0x0F	; 15
    14fc:	40 5d       	subi	r20, 0xD0	; 208
    14fe:	4a 33       	cpi	r20, 0x3A	; 58
    1500:	18 f0       	brcs	.+6      	; 0x1508 <__ultoa_invert+0x7c>
    1502:	49 5d       	subi	r20, 0xD9	; 217
    1504:	31 fd       	sbrc	r19, 1
    1506:	40 52       	subi	r20, 0x20	; 32
    1508:	41 93       	st	Z+, r20
    150a:	02 d0       	rcall	.+4      	; 0x1510 <__ultoa_invert+0x84>
    150c:	a9 f7       	brne	.-22     	; 0x14f8 <__ultoa_invert+0x6c>
    150e:	ea cf       	rjmp	.-44     	; 0x14e4 <__ultoa_invert+0x58>
    1510:	b4 e0       	ldi	r27, 0x04	; 4
    1512:	a6 95       	lsr	r26
    1514:	97 95       	ror	r25
    1516:	87 95       	ror	r24
    1518:	77 95       	ror	r23
    151a:	67 95       	ror	r22
    151c:	ba 95       	dec	r27
    151e:	c9 f7       	brne	.-14     	; 0x1512 <__ultoa_invert+0x86>
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	61 05       	cpc	r22, r1
    1524:	71 05       	cpc	r23, r1
    1526:	08 95       	ret
    1528:	9b 01       	movw	r18, r22
    152a:	ac 01       	movw	r20, r24
    152c:	0a 2e       	mov	r0, r26
    152e:	06 94       	lsr	r0
    1530:	57 95       	ror	r21
    1532:	47 95       	ror	r20
    1534:	37 95       	ror	r19
    1536:	27 95       	ror	r18
    1538:	ba 95       	dec	r27
    153a:	c9 f7       	brne	.-14     	; 0x152e <__ultoa_invert+0xa2>
    153c:	62 0f       	add	r22, r18
    153e:	73 1f       	adc	r23, r19
    1540:	84 1f       	adc	r24, r20
    1542:	95 1f       	adc	r25, r21
    1544:	a0 1d       	adc	r26, r0
    1546:	08 95       	ret

00001548 <__muluhisi3>:
    1548:	9e dc       	rcall	.-1732   	; 0xe86 <__umulhisi3>
    154a:	a5 9f       	mul	r26, r21
    154c:	90 0d       	add	r25, r0
    154e:	b4 9f       	mul	r27, r20
    1550:	90 0d       	add	r25, r0
    1552:	a4 9f       	mul	r26, r20
    1554:	80 0d       	add	r24, r0
    1556:	91 1d       	adc	r25, r1
    1558:	11 24       	eor	r1, r1
    155a:	08 95       	ret

0000155c <__mulshisi3>:
    155c:	b7 ff       	sbrs	r27, 7
    155e:	f4 cf       	rjmp	.-24     	; 0x1548 <__muluhisi3>

00001560 <__mulohisi3>:
    1560:	f3 df       	rcall	.-26     	; 0x1548 <__muluhisi3>
    1562:	82 1b       	sub	r24, r18
    1564:	93 0b       	sbc	r25, r19
    1566:	08 95       	ret

00001568 <_exit>:
    1568:	f8 94       	cli

0000156a <__stop_program>:
    156a:	ff cf       	rjmp	.-2      	; 0x156a <__stop_program>
